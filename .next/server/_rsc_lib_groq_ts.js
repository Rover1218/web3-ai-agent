"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_groq_ts";
exports.ids = ["_rsc_lib_groq_ts"];
exports.modules = {

/***/ "(rsc)/./lib/groq.ts":
/*!*********************!*\
  !*** ./lib/groq.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeCryptoData: () => (/* binding */ analyzeCryptoData),\n/* harmony export */   generateInsights: () => (/* binding */ generateInsights)\n/* harmony export */ });\n/* harmony import */ var groq_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! groq-sdk */ \"(rsc)/./node_modules/groq-sdk/index.mjs\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(rsc)/./lib/api.ts\");\n\n\n// Helper functions for data extraction\nfunction extractTokens(query) {\n    const tokens = [\n        \"BTC\",\n        \"ETH\",\n        \"USDT\",\n        \"USDC\",\n        \"BNB\",\n        \"SOL\",\n        \"ADA\",\n        \"DOT\",\n        \"AVAX\",\n        \"MATIC\"\n    ];\n    return tokens.filter((token)=>query.toUpperCase().includes(token));\n}\nfunction extractProjects(query) {\n    const projects = [\n        \"Uniswap\",\n        \"Aave\",\n        \"Compound\",\n        \"Maker\",\n        \"Curve\",\n        \"Sushi\",\n        \"PancakeSwap\"\n    ];\n    return projects.filter((project)=>query.toLowerCase().includes(project.toLowerCase()));\n}\nfunction extractTimeFrame(query) {\n    if (query.toLowerCase().includes(\"day\") || query.toLowerCase().includes(\"24h\")) return \"day\";\n    if (query.toLowerCase().includes(\"week\") || query.toLowerCase().includes(\"7d\")) return \"week\";\n    if (query.toLowerCase().includes(\"month\") || query.toLowerCase().includes(\"30d\")) return \"month\";\n    return \"week\";\n}\n// Groq API configuration with fallback models\nconst GROQ_MODELS = [\n    \"llama-3.1-8b-instant\",\n    \"llama-3.1-70b-versatile\",\n    \"mixtral-8x7b-32768\",\n    \"gemma2-9b-it\" // Fallback\n];\nlet currentModelIndex = 0;\nconst getGroqModel = ()=>{\n    return GROQ_MODELS[currentModelIndex] || GROQ_MODELS[0];\n};\nconst nextModel = ()=>{\n    currentModelIndex = (currentModelIndex + 1) % GROQ_MODELS.length;\n    return getGroqModel();\n};\n// Initialize without explicitly setting the API key, it will use GROQ_API_KEY env var automatically\nconst groq = new groq_sdk__WEBPACK_IMPORTED_MODULE_1__.Groq();\n// Available model fallbacks in order of preference\nconst MODEL_FALLBACKS = [\n    \"llama-3.3-70b-versatile\",\n    \"llama-3.2-70b-versatile\",\n    \"gemma-7b-it\",\n    \"mistral-7b-instruct\",\n    \"mixtral-8x7b-32768\" // Fallback 4\n];\n// Function to select the appropriate model based on retry count\nfunction getCurrentModel(retryCount = 0) {\n    // If retryCount is beyond our available models, use the last one\n    const index = Math.min(retryCount, MODEL_FALLBACKS.length - 1);\n    const model = MODEL_FALLBACKS[index];\n    console.log(`Using model: ${model} (retry attempt: ${retryCount})`);\n    return model;\n}\nfunction detectIntents(query) {\n    const q = query.toLowerCase();\n    // Check if query is crypto-related\n    const isCryptoRelated = /crypto|bitcoin|ethereum|defi|blockchain|token|coin|market|price|tvl|protocol|trading|wallet|exchange|nft|web3|metaverse|dao|yield|staking|liquidity|swap|amm|dex|cex|altcoin|meme|stablecoin|governance|validator|mining|hash|gas|fee|slippage|impermanent|loss|apy|apr|volume|marketcap|cap|rank|chart|technical|fundamental|analysis|trend|bull|bear|pump|dump|hodl|fomo|fud|shill|moon|lambo|rekt|ser|anon|gm|wagmi|ngmi|diamond|hands|paper|hands|dca|btc|eth|usdt|usdc|dai|link|uni|aave|comp|mkr|sushi|curve|balancer|yearn|harvest|pickle|cream|alpha|beta|gamma|delta|theta|vega|rho|greeks|options|futures|perpetual|leverage|margin|short|long|hedge|arbitrage|frontrun|sandwich|mev|flash|loan|collateral|debt|ceiling|floor|resistance|support|fibonacci|rsi|macd|bollinger|moving|average|ema|sma|ema|volume|profile|order|book|bid|ask|spread|depth|liquidity|pool|pair|route|slippage|impact|price|impact|curve|bonding|curve|amm|automated|market|maker|constant|product|constant|sum|constant|mean|geometric|mean|harmonic|mean|weighted|average|price|vwap|twap|oracle|chainlink|band|nest|pyth|umbrella|api3|dia|tellor|provable|random|number|generator|vrf|verifiable|random|function|commit|reveal|scheme|zero|knowledge|proof|zkp|snark|stark|plonk|groth|bulletproof|range|proof|ring|signature|confidential|transaction|mimblewimble|grin|beam|monero|privacy|coin|mixer|tumbler|coinjoin|wasabi|samourai|joinmarket|atomic|swap|cross|chain|bridge|wormhole|multichain|anyswap|stargate|layer|zero|cosmos|polkadot|avalanche|polygon|arbitrum|optimism|base|zksync|scroll|linea|mantle|op|stack|rollup|zk|rollup|optimistic|rollup|validium|plasma|state|channel|payment|channel|lightning|network|liquid|sidechain|peg|in|peg|out|wrapped|token|wbtc|weth|wmatic|wavax|wbnb|wftm|wone|wmovr|wglmr|wksm|wdot|watom|wosmo|wjun|wscrt|wband|wlink|wuni|waave|wcomp|wmkr|wsushi|wcurve|wbalancer|wyearn|wharvest|wpickle|wcream|walpha|wbeta|wgamma|wdelta|wtheta|wvega|wrho|wgreeks|woptions|wfutures|wperpetual|wleverage|wmargin|wshort|wlong|whedge|warbitrage|wfrontrun|wsandwich|wmev|wflash|wloan|wcollateral|wdebt|wceiling|wfloor|wresistance|wsupport|wfibonacci|wrsi|wmacd|wbollinger|wmoving|waverage|wema|wsma|wema|wvolume|wprofile|worder|wbook|wbid|wask|wspread|wdepth|wliquidity|wpool|wpair|wroute|wslippage|wimpact|wprice|wimpact|wcurve|wbonding|wcurve|wamm|wautomated|wmarket|wmaker|wconstant|wproduct|wconstant|wsum|wconstant|wmean|wgeometric|wmean|wharmonic|wmean|wweighted|waverage|wprice|wvwap|wtwap|woracle|wchainlink|wband|wnest|wpyth|wumbrella|wapi3|wdia|wtellor|wprovable|wrandom|wnumber|wgenerator|wvrf|wverifiable|wrandom|wfunction|wcommit|wreveal|wscheme|wzero|wknowledge|wproof|wzkp|wsnark|wstark|wplonk|wgroth|wbulletproof|wrange|wproof|wring|wsignature|wconfidential|wtransaction|wmimblewimble|wgrin|wbeam|wmonero|wprivacy|wcoin|wmixer|wtumbler|wcoinjoin|wwasabi|wsamourai|wjoinmarket|watomic|wswap|wcross|wchain|wbridge|wwormhole|wmultichain|wanyswap|wstargate|wlayer|wzero|wcosmos|wpolkadot|wavalanche|wpolygon|warbitrum|woptimism|wbase|wzksync|wscroll|wlinea|wmantle|wop|wstack|wrollup|wzk|wrollup|woptimistic|wrollup|wvalidium|wplasma|wstate|wchannel|wpayment|wchannel|wlightning|wnetwork|wliquid|wsidechain|wpeg|win|wpeg|wout|wwrapped|wtoken/.test(q);\n    // If not crypto-related, return all false\n    if (!isCryptoRelated) {\n        return {\n            showDeFi: false,\n            showTable: false,\n            isCryptoQuery: false\n        };\n    }\n    return {\n        showDeFi: /defi|protocol|tvl|project|compare|top|performance|growth/.test(q),\n        showTable: /compare|table|list|top|performance|summary|metrics/.test(q),\n        showEtherscan: /ethereum|eth|contract|transaction|gas|blockchain|address|token|smart contract/.test(q),\n        isCryptoQuery: true\n    };\n}\n// Generate data table from raw data sources that's relevant to the query\nfunction generateDataTableFromRawData(data, query = \"\") {\n    console.log(\"\\uD83D\\uDD04 Generating data table from raw data for query:\", query);\n    console.log(\"\\uD83D\\uDCCA Input data structure:\", {\n        defiProjectsCount: data.defiProjects?.length || 0,\n        cryptoDataCount: data.cryptoData?.length || 0\n    });\n    const tableRows = [];\n    try {\n        // Extract query context if available\n        const queryContext = data.queryContext || {\n            timeFrame: \"week\",\n            topN: 5,\n            useTrending: false\n        };\n        // Create a better mapping between DeFi projects and their tokens\n        const projectTokenMapping = {\n            \"Uniswap\": \"UNI\",\n            \"Aave\": \"AAVE\",\n            \"Compound\": \"COMP\",\n            \"MakerDAO\": \"MKR\",\n            \"Lido\": \"LDO\",\n            \"Curve\": \"CRV\",\n            \"SushiSwap\": \"SUSHI\",\n            \"Yearn Finance\": \"YFI\",\n            \"Synthetix\": \"SNX\",\n            \"PancakeSwap\": \"CAKE\",\n            \"Balancer\": \"BAL\",\n            \"1inch\": \"1INCH\"\n        };\n        // If we have DeFi projects, use them as the primary data source\n        if (data.defiProjects && Array.isArray(data.defiProjects)) {\n            console.log(\"\\uD83C\\uDFDB️ Processing DeFi projects data\");\n            // Sort projects based on query context\n            let sortedProjects = [\n                ...data.defiProjects\n            ];\n            // If query mentions TVL or growth, sort by TVL\n            if (query.toLowerCase().includes(\"tvl\") || query.toLowerCase().includes(\"growth\") || query.toLowerCase().includes(\"surge\")) {\n                if (query.toLowerCase().includes(\"highest\") || query.toLowerCase().includes(\"top\") || query.toLowerCase().includes(\"best\")) {\n                    // Sort by TVL descending\n                    sortedProjects.sort((a, b)=>(b.tvl || 0) - (a.tvl || 0));\n                } else if (query.toLowerCase().includes(\"change\") || query.toLowerCase().includes(\"growth\") || query.toLowerCase().includes(\"surge\")) {\n                    // Sort by TVL change\n                    sortedProjects.sort((a, b)=>(b.tvlChange7d || b.tvlChange24h || 0) - (a.tvlChange7d || a.tvlChange24h || 0));\n                }\n            }\n            // Limit to a reasonable number of rows based on the query\n            const limit = query.toLowerCase().includes(\"top 10\") ? 10 : query.toLowerCase().includes(\"top 5\") ? 5 : Math.min(10, queryContext.topN || 5);\n            sortedProjects.slice(0, limit).forEach((project, index)=>{\n                if (project && project.name) {\n                    // Find corresponding crypto price data using better matching\n                    const tokenSymbol = projectTokenMapping[project.name] || project.symbol;\n                    const cryptoData = data.cryptoData?.find((c)=>c?.symbol?.toLowerCase() === tokenSymbol?.toLowerCase() || c?.symbol?.toLowerCase() === project.symbol?.toLowerCase() || c?.name?.toLowerCase().includes(project.name.toLowerCase()) || project.name.toLowerCase().includes(c?.name?.toLowerCase()));\n                    if (index < 3) {\n                        console.log(`🔍 Project ${project.name}:`, {\n                            tokenSymbol,\n                            foundCrypto: !!cryptoData,\n                            cryptoPrice: cryptoData?.price\n                        });\n                    }\n                    // Create a predictable mapping of DeFi projects to sentiments\n                    const defiProjectSentiments = {\n                        \"Uniswap\": \"Positive\",\n                        \"Aave\": \"Positive\",\n                        \"Compound\": \"Neutral\",\n                        \"MakerDAO\": \"Positive\",\n                        \"Curve\": \"Neutral\",\n                        \"Lido\": \"Positive\",\n                        \"SushiSwap\": \"Neutral\",\n                        \"Yearn Finance\": \"Neutral\",\n                        \"Synthetix\": \"Positive\",\n                        \"PancakeSwap\": \"Positive\",\n                        \"Balancer\": \"Neutral\",\n                        \"1inch\": \"Neutral\"\n                    };\n                    // Extract change values\n                    const priceChange = cryptoData?.priceChange24h || 0;\n                    const tvlChange = project.tvlChange7d || project.tvlChange24h || 0;\n                    // Use the predefined sentiment or calculate based on metrics\n                    let sentiment = defiProjectSentiments[project.name] || \"Neutral\";\n                    // Only use calculations for projects not in our mapping\n                    if (!defiProjectSentiments[project.name]) {\n                        // If both metrics are available, use them both\n                        if (cryptoData && (priceChange !== 0 || tvlChange !== 0)) {\n                            // Weight price changes more heavily than TVL\n                            const combinedChange = cryptoData ? priceChange * 0.7 + tvlChange * 0.3 : tvlChange;\n                            if (combinedChange > 2.5) sentiment = \"Positive\";\n                            else if (combinedChange < -2.5) sentiment = \"Negative\";\n                        }\n                    }\n                    // Calculate news count based on actual news events if available\n                    let newsCount;\n                    // Check if we have news events data\n                    if (data.newsEvents && Array.isArray(data.newsEvents) && data.newsEvents.length > 0) {\n                        // Count news events related to this project\n                        const projectNews = data.newsEvents.filter((news)=>news.title.includes(project.name) || project.symbol && news.title.includes(project.symbol));\n                        newsCount = projectNews.length;\n                        // If no news was found, use a small default value\n                        if (newsCount === 0) {\n                            newsCount = Math.floor(Math.random() * 5) + 1;\n                        }\n                    } else {\n                        // Fallback to generate a realistic news count based on the project popularity\n                        const baseNewsCount = Math.floor(5 + (project.tvl || 0) / 1e9); // More TVL = more news\n                        newsCount = Math.min(30, Math.max(5, baseNewsCount + (Math.abs(tvlChange) > 5 ? 10 : 0 // Big TVL changes generate more news\n                        )));\n                    }\n                    tableRows.push({\n                        project: project.name,\n                        tvl: formatCurrency(project.tvl || 0),\n                        tvlChange: formatPercentage(tvlChange),\n                        price: cryptoData ? formatCurrency(cryptoData.price || 0) : \"N/A\",\n                        priceChange: cryptoData ? formatPercentage(priceChange) : \"N/A\",\n                        sentiment: sentiment,\n                        newsCount: newsCount\n                    });\n                }\n            });\n        }\n        // If no DeFi projects but we have crypto data, use crypto data\n        if (tableRows.length === 0 && data.cryptoData && Array.isArray(data.cryptoData)) {\n            console.log(\"\\uD83D\\uDCB0 Falling back to crypto data\");\n            data.cryptoData.slice(0, 10).forEach((crypto)=>{\n                if (crypto && crypto.name) {\n                    // Determine sentiment based on price change with fixed thresholds\n                    let sentiment = \"Neutral\";\n                    const priceChange = crypto.priceChange24h || 0;\n                    // Use stricter thresholds to make sentiment more stable\n                    if (priceChange > 2.5) sentiment = \"Positive\";\n                    else if (priceChange < -2.5) sentiment = \"Negative\";\n                    // Fixed news count based on crypto type rather than using random numbers\n                    let newsCount;\n                    if (crypto.symbol === \"BTC\") newsCount = 25;\n                    else if (crypto.symbol === \"ETH\") newsCount = 20;\n                    else if ([\n                        \"BNB\",\n                        \"SOL\",\n                        \"ADA\",\n                        \"XRP\"\n                    ].includes(crypto.symbol)) newsCount = 15;\n                    else if ([\n                        \"DOT\",\n                        \"DOGE\",\n                        \"MATIC\",\n                        \"AVAX\",\n                        \"LINK\"\n                    ].includes(crypto.symbol)) newsCount = 12;\n                    else newsCount = 8;\n                    tableRows.push({\n                        project: crypto.name,\n                        tvl: \"N/A\",\n                        tvlChange: \"N/A\",\n                        price: formatCurrency(crypto.price || 0),\n                        priceChange: formatPercentage(priceChange),\n                        sentiment: sentiment,\n                        newsCount: newsCount\n                    });\n                }\n            });\n        }\n        // If still no data, create placeholder data\n        if (tableRows.length === 0) {\n            console.log(\"\\uD83D\\uDCAD Creating placeholder data\");\n            // Default placeholder crypto names\n            const placeholderProjects = [\n                \"Bitcoin\",\n                \"Ethereum\",\n                \"BNB\",\n                \"Solana\",\n                \"Cardano\"\n            ];\n            // Add placeholder data with consistent, non-random sentiment values\n            // Use predefined sentiments based on the project name to ensure consistency\n            const projectSentiments = {\n                \"Bitcoin\": \"Positive\",\n                \"Ethereum\": \"Positive\",\n                \"BNB\": \"Neutral\",\n                \"Solana\": \"Positive\",\n                \"Cardano\": \"Neutral\"\n            };\n            placeholderProjects.forEach((project)=>{\n                // Use predefined sentiment or default to Neutral\n                const sentiment = projectSentiments[project] || \"Neutral\";\n                // Use fixed news count values instead of random numbers\n                const newsCount = project === \"Bitcoin\" ? 25 : project === \"Ethereum\" ? 20 : project === \"BNB\" ? 15 : project === \"Solana\" ? 12 : project === \"Cardano\" ? 10 : 8;\n                tableRows.push({\n                    project: project,\n                    tvl: \"N/A\",\n                    tvlChange: \"N/A\",\n                    price: \"N/A\",\n                    priceChange: \"N/A\",\n                    sentiment: sentiment,\n                    newsCount: newsCount\n                });\n            });\n        }\n        console.log(`✅ Generated ${tableRows.length} table rows`);\n    } catch (error) {\n        console.error(\"Error generating data table:\", error);\n    }\n    return tableRows;\n}\n// Helper functions for formatting\nfunction formatCurrency(value) {\n    if (typeof value !== \"number\" || isNaN(value)) return \"N/A\";\n    if (value >= 1e9) {\n        return `$${(value / 1e9).toFixed(2)}B`;\n    } else if (value >= 1e6) {\n        return `$${(value / 1e6).toFixed(2)}M`;\n    } else if (value >= 1e3) {\n        return `$${(value / 1e3).toFixed(2)}K`;\n    } else {\n        return `$${value.toFixed(2)}`;\n    }\n}\nfunction formatPercentage(value) {\n    if (typeof value !== \"number\" || isNaN(value)) return \"0%\";\n    return `${value > 0 ? \"+\" : \"\"}${value.toFixed(2)}%`;\n}\nasync function analyzeCryptoData(query, data) {\n    console.log(\"\\uD83D\\uDD0D Fetching data for query:\", query);\n    console.log(\"\\uD83D\\uDD52 Query timestamp:\", new Date().toISOString());\n    // Extract focus tokens and projects\n    const focusTokens = extractTokens(query);\n    const focusProjects = extractProjects(query);\n    const timeFrame = extractTimeFrame(query);\n    const useTrending = query.toLowerCase().includes(\"trending\") || query.toLowerCase().includes(\"popular\");\n    const useRandomOrder = !focusTokens.length && !focusProjects.length;\n    console.log(\"\\uD83C\\uDFAF Focus tokens:\", focusTokens);\n    console.log(\"\\uD83C\\uDFAF Focus projects:\", focusProjects);\n    console.log(\"⏰ Time frame:\", timeFrame);\n    console.log(\"\\uD83D\\uDCC8 Using trending data:\", useTrending);\n    console.log(\"\\uD83D\\uDD04 Using random order:\", useRandomOrder);\n    try {\n        // Fetch data\n        const allData = await (0,_api__WEBPACK_IMPORTED_MODULE_0__.fetchAllData)(query);\n        console.log(\"\\uD83D\\uDCCA Fetched data summary:\", {\n            cryptoDataCount: allData.cryptoData?.length || 0,\n            defiProjectsCount: allData.defiProjects?.length || 0\n        });\n        // Generate analysis using Groq with fallback models\n        const analysis = await generateAnalysisWithFallback(query, allData);\n        // Transform data to match ResearchResult interface\n        const transformedData = {\n            cryptoData: allData.cryptoData || [],\n            defiProjects: allData.defiProjects || [],\n            socialSentiment: allData.socialSentiment || [],\n            newsEvents: allData.newsEvents || [],\n            etherscanData: allData.etherscanData || undefined\n        };\n        // Refine data table for explicit comparison queries (e.g., \"Compare Ethereum and Solana\")\n        const refinedTable = refineComparisonTable(query, transformedData, analysis.dataTable || []);\n        return {\n            summary: analysis.summary,\n            data: transformedData,\n            dataTable: refinedTable,\n            sources: analysis.sources,\n            timestamp: new Date().toISOString(),\n            showDeFi: Boolean(allData.defiProjects && allData.defiProjects.length > 0),\n            showTable: Boolean(analysis.dataTable && analysis.dataTable.length > 0),\n            showEtherscan: Boolean(allData.etherscanData && Object.keys(allData.etherscanData || {}).length > 0),\n            isCryptoQuery: true,\n            insights: analysis.insights || [],\n            riskFactors: analysis.riskFactors || [],\n            marketTrends: analysis.marketTrends || \"\"\n        };\n    } catch (error) {\n        console.error(\"❌ Error in analyzeCryptoData:\", error);\n        // Return a basic fallback response\n        return {\n            summary: `Analysis completed. ${error instanceof Error ? error.message : \"Unknown error occurred\"}`,\n            data: {},\n            sources: [\n                \"Fallback Analysis\"\n            ],\n            timestamp: new Date().toISOString(),\n            showDeFi: false,\n            showTable: false,\n            showEtherscan: false,\n            isCryptoQuery: true,\n            insights: [\n                \"Analysis completed with basic method\"\n            ],\n            riskFactors: [\n                \"Use standard mode for more reliable responses\"\n            ],\n            marketTrends: \"Unable to complete full analysis\"\n        };\n    }\n}\nasync function generateAnalysisWithFallback(query, data, maxRetries = 3) {\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            console.log(`Attempting Groq API call (attempt ${attempt}/${maxRetries})...`);\n            const model = getGroqModel();\n            console.log(`Using model: ${model} (retry attempt: ${attempt - 1})`);\n            const groq = new groq_sdk__WEBPACK_IMPORTED_MODULE_1__.Groq({\n                apiKey: process.env.GROQ_API_KEY\n            });\n            // --- DATA REDUCTION / TOKEN BUDGETING ---------------------------------\n            // We aggressively trim the dataset before sending to the model to avoid 413\n            const reduced = reduceDataForModel(data, query, attempt);\n            const reducedJson = JSON.stringify(reduced); // no pretty print to save tokens\n            const approxInputTokens = Math.ceil(reducedJson.length / 4); // rough heuristic\n            console.log(`🗜️ Reduced data length: ${reducedJson.length} chars (~${approxInputTokens} tokens)`);\n            if (approxInputTokens > 5500) {\n                console.warn(\"⚠️ Still above safe token budget after reduction – applying hard trim\");\n                // Hard trim: keep only essential aggregates\n                const hardTrim = {\n                    meta: reduced.meta,\n                    aggregates: reduced.aggregates,\n                    topCrypto: reduced.cryptoData?.slice(0, 5),\n                    topDeFi: reduced.defiProjects?.slice(0, 5),\n                    news: reduced.newsEvents?.slice(0, 5)?.map((n)=>({\n                            t: n.title,\n                            d: n.publishedAt\n                        }))\n                };\n                const hardTrimJson = JSON.stringify(hardTrim);\n                console.log(`🪓 Hard trimmed length: ${hardTrimJson.length} chars (~${Math.ceil(hardTrimJson.length / 4)} tokens)`);\n            }\n            const systemPrompt = \"You are an expert crypto analyst. Respond ONLY with a minified JSON object. No markdown, no commentary.\";\n            const userPrompt = `Query: ${query}\\nData:${reducedJson}\\nReturn JSON with keys: summary (string), insights (string[] max 6), riskFactors (string[] max 6), marketTrends (string), sources (string[]), dataTable (rows <= 10, fields: project,tvl,tvlChange,price,priceChange,sentiment,newsCount).`;\n            const completion = await groq.chat.completions.create({\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    },\n                    {\n                        role: \"user\",\n                        content: userPrompt\n                    }\n                ],\n                model,\n                temperature: 0.1,\n                max_tokens: 1400,\n                top_p: 1,\n                stream: false\n            });\n            const response = completion.choices[0]?.message?.content;\n            if (!response) {\n                throw new Error(\"Empty response from Groq\");\n            }\n            // Try to parse JSON from the response\n            try {\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    return JSON.parse(jsonMatch[0]);\n                }\n            } catch (parseError) {\n                console.warn(\"JSON parsing failed, using text response\");\n            }\n            // Fallback: create structured response from text\n            return {\n                summary: response,\n                insights: [\n                    \"Analysis completed successfully\"\n                ],\n                riskFactors: [\n                    \"Consider market volatility\"\n                ],\n                marketTrends: \"Market analysis completed\",\n                sources: [\n                    \"Groq AI Analysis\"\n                ],\n                dataTable: []\n            };\n        } catch (error) {\n            console.error(`Groq API error (${error.status === 429 ? \"rate limit\" : \"general error\"}):`, error.status, error.message);\n            // Handle payload too large / token limit message (413 or token size notice)\n            const msg = error?.message || \"\";\n            if (error.status === 413 || msg.includes(\"Request too large\") || msg.includes(\"tokens per minute\")) {\n                console.warn(\"\\uD83D\\uDD01 Oversized request detected, further reducing data & switching model\");\n                nextModel();\n                if (attempt < maxRetries) {\n                    await new Promise((r)=>setTimeout(r, 500 * attempt));\n                    continue;\n                }\n            }\n            if (error.status === 429) {\n                console.log(\"Rate limit hit, trying next model...\");\n                nextModel();\n                if (attempt < maxRetries) {\n                    const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\n                    console.log(`Retrying in ${delay}ms with model fallback...`);\n                    await new Promise((resolve)=>setTimeout(resolve, delay));\n                    continue;\n                }\n            } else if (error.status === 404) {\n                console.log(\"Model not found, trying next model...\");\n                nextModel();\n                if (attempt < maxRetries) {\n                    const delay = 2000 * attempt;\n                    console.log(`Retrying in ${delay}ms with model fallback...`);\n                    await new Promise((resolve)=>setTimeout(resolve, delay));\n                    continue;\n                }\n            }\n            throw error;\n        }\n    }\n    throw new Error(\"All Groq models failed\");\n}\n// Reduce raw fetched data to a compact, model-friendly subset.\nfunction reduceDataForModel(data, query, attempt) {\n    try {\n        const qLower = (query || \"\").toLowerCase();\n        const focusTokens = extractTokens(query || \"\");\n        const maxDeFi = attempt === 1 ? 15 : attempt === 2 ? 10 : 5;\n        const maxCrypto = attempt === 1 ? 12 : attempt === 2 ? 8 : 5;\n        const maxNews = attempt === 1 ? 20 : attempt === 2 ? 10 : 5;\n        const cryptoData = (data.cryptoData || []).filter((c)=>focusTokens.length ? focusTokens.includes(c.symbol) : true).sort((a, b)=>(b.marketCap || 0) - (a.marketCap || 0)).slice(0, maxCrypto).map((c)=>({\n                symbol: c.symbol,\n                name: c.name,\n                price: c.price,\n                priceChange24h: c.priceChange24h,\n                marketCap: c.marketCap,\n                volume24h: c.volume24h\n            }));\n        const defiProjects = (data.defiProjects || []).sort((a, b)=>(b.tvl || 0) - (a.tvl || 0)).slice(0, maxDeFi).map((p)=>({\n                name: p.name,\n                tvl: p.tvl,\n                tvlChange24h: p.tvlChange24h,\n                tvlChange7d: p.tvlChange7d,\n                chains: p.chains?.slice(0, 5)\n            }));\n        const newsEvents = (data.newsEvents || []).slice(0, maxNews).map((n)=>({\n                title: n.title,\n                sentiment: n.sentiment,\n                publishedAt: n.publishedAt\n            }));\n        const etherscanGas = data.etherscanData?.gasPrice ? {\n            LastBlock: data.etherscanData.gasPrice.LastBlock,\n            SafeGasPrice: data.etherscanData.gasPrice.SafeGasPrice,\n            Fast: data.etherscanData.gasPrice.Fast\n        } : undefined;\n        // Aggregates to help model without full raw arrays\n        const tvlTotal = (data.defiProjects || []).reduce((s, p)=>s + (p.tvl || 0), 0);\n        const avgPriceChange = cryptoData.length ? cryptoData.reduce((s, c)=>s + (c.priceChange24h || 0), 0) / cryptoData.length : 0;\n        const generatedTable = generateDataTableFromRawData({\n            defiProjects,\n            cryptoData,\n            newsEvents\n        }, query).slice(0, 10); // ensure max 10 rows\n        return {\n            meta: {\n                attempt,\n                focusTokens,\n                queryFragment: query.slice(0, 160)\n            },\n            aggregates: {\n                tvlTotal,\n                avgPriceChange: Number(avgPriceChange.toFixed(2)),\n                defiCount: (data.defiProjects || []).length,\n                cryptoCount: (data.cryptoData || []).length,\n                newsCount: (data.newsEvents || []).length\n            },\n            cryptoData,\n            defiProjects,\n            newsEvents,\n            etherscan: etherscanGas,\n            // Provide already generated dataTable to reduce model work\n            suggestedTable: generatedTable\n        };\n    } catch (e) {\n        console.warn(\"reduceDataForModel failed, returning minimal structure\", e);\n        return {\n            meta: {\n                attempt,\n                error: true\n            },\n            cryptoData: [],\n            defiProjects: []\n        };\n    }\n}\n// Fallback function to generate a clean summary from available data\nfunction generateFallbackSummary(data, query) {\n    let summary = \"\";\n    try {\n        // Extract query keywords to make the response more relevant\n        const queryLower = query.toLowerCase();\n        const mentionsBitcoin = queryLower.includes(\"bitcoin\") || queryLower.includes(\"btc\");\n        const mentionsEthereum = queryLower.includes(\"ethereum\") || queryLower.includes(\"eth\");\n        const mentionsDeFi = queryLower.includes(\"defi\") || queryLower.includes(\"protocol\") || queryLower.includes(\"tvl\");\n        const mentionsPrice = queryLower.includes(\"price\") || queryLower.includes(\"market\") || queryLower.includes(\"trading\");\n        const mentionsTop = queryLower.includes(\"top\") || queryLower.includes(\"best\") || queryLower.includes(\"leading\");\n        // Add personalized intro based on the query\n        summary += `Based on your query about ${mentionsDeFi ? \"DeFi protocols\" : mentionsBitcoin ? \"Bitcoin\" : mentionsEthereum ? \"Ethereum\" : \"the crypto market\"}, here's my analysis: \\n\\n`;\n        // Add DeFi projects analysis\n        if (data.defiProjects && Array.isArray(data.defiProjects) && data.defiProjects.length > 0) {\n            const topProjects = data.defiProjects.slice(0, 3);\n            summary += `Analysis of the DeFi market reveals ${data.defiProjects.length} active protocols. `;\n            if (mentionsTop || !mentionsPrice) {\n                summary += `The top performers by Total Value Locked (TVL) include ${topProjects.map((p)=>p?.name || \"Unknown\").join(\", \")}. `;\n            }\n            const totalTVL = data.defiProjects.reduce((sum, p)=>sum + (p?.tvl || 0), 0);\n            if (totalTVL > 0) {\n                summary += `Total Value Locked across all protocols is approximately $${(totalTVL / 1e9).toFixed(1)}B. `;\n            }\n            // Add TVL change analysis if we have that data\n            const projectsWithTVLChange = data.defiProjects.filter((p)=>typeof p.tvlChange7d === \"number\" || typeof p.tvlChange24h === \"number\");\n            if (projectsWithTVLChange.length > 0) {\n                // Sort by TVL change\n                const sortedByChange = [\n                    ...projectsWithTVLChange\n                ].sort((a, b)=>(b.tvlChange7d || b.tvlChange24h || 0) - (a.tvlChange7d || a.tvlChange24h || 0));\n                const topGainer = sortedByChange[0];\n                const topLoser = sortedByChange[sortedByChange.length - 1];\n                if (topGainer && (topGainer.tvlChange7d > 0 || topGainer.tvlChange24h > 0)) {\n                    const changeValue = topGainer.tvlChange7d || topGainer.tvlChange24h;\n                    summary += `${topGainer.name} shows the highest growth with a ${changeValue.toFixed(2)}% increase in TVL. `;\n                }\n                if (topLoser && (topLoser.tvlChange7d < 0 || topLoser.tvlChange24h < 0)) {\n                    const changeValue = topLoser.tvlChange7d || topLoser.tvlChange24h;\n                    summary += `${topLoser.name} has experienced a ${Math.abs(changeValue).toFixed(2)}% decrease in TVL. `;\n                }\n            }\n        }\n        // Add crypto market data\n        if (data.cryptoData && Array.isArray(data.cryptoData) && data.cryptoData.length > 0) {\n            // Get current date for context\n            const now = new Date();\n            const dateStr = now.toLocaleDateString(\"en-US\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            });\n            summary += `\\nAs of ${dateStr}, `;\n            const btc = data.cryptoData.find((c)=>c?.symbol === \"BTC\");\n            const eth = data.cryptoData.find((c)=>c?.symbol === \"ETH\");\n            if (btc && typeof btc.price === \"number\") {\n                summary += `Bitcoin is currently trading at $${btc.price.toLocaleString(undefined, {\n                    maximumFractionDigits: 2\n                })}`;\n                if (typeof btc.priceChange24h === \"number\") {\n                    summary += ` with a 24h change of ${btc.priceChange24h > 0 ? \"+\" : \"\"}${btc.priceChange24h.toFixed(2)}%. `;\n                } else {\n                    summary += \". \";\n                }\n            }\n            if (eth && typeof eth.price === \"number\") {\n                summary += `Ethereum is trading at $${eth.price.toLocaleString(undefined, {\n                    maximumFractionDigits: 2\n                })}`;\n                if (typeof eth.priceChange24h === \"number\") {\n                    summary += ` with a 24h change of ${eth.priceChange24h > 0 ? \"+\" : \"\"}${eth.priceChange24h.toFixed(2)}%. `;\n                } else {\n                    summary += \". \";\n                }\n            }\n            // Add analysis of other notable cryptocurrencies\n            const otherCryptos = data.cryptoData.filter((c)=>c?.symbol !== \"BTC\" && c?.symbol !== \"ETH\" && typeof c?.price === \"number\" && typeof c?.priceChange24h === \"number\");\n            if (otherCryptos.length > 0) {\n                // Sort by price change to find biggest gainers/losers\n                const sortedByChange = [\n                    ...otherCryptos\n                ].sort((a, b)=>b.priceChange24h - a.priceChange24h);\n                // Grab top gainer and loser\n                const topGainer = sortedByChange[0];\n                const topLoser = sortedByChange[sortedByChange.length - 1];\n                summary += `\\n\\nAmong altcoins, `;\n                if (topGainer && topGainer.priceChange24h > 0) {\n                    summary += `${topGainer.name} (${topGainer.symbol}) is the top performer with a ${topGainer.priceChange24h > 0 ? \"+\" : \"\"}${topGainer.priceChange24h.toFixed(2)}% price change, currently at $${topGainer.price.toLocaleString(undefined, {\n                        maximumFractionDigits: 2\n                    })}. `;\n                }\n                if (topLoser && topLoser.priceChange24h < 0) {\n                    summary += `${topLoser.name} (${topLoser.symbol}) shows the largest decline at ${topLoser.priceChange24h.toFixed(2)}%, trading at $${topLoser.price.toLocaleString(undefined, {\n                        maximumFractionDigits: 2\n                    })}. `;\n                }\n            }\n        }\n        // Add conclusion and recommendations\n        summary += `\\n\\nIn summary, ${generateDynamicConclusion(query, data)}`;\n    } catch (error) {\n        console.error(\"Error in generateFallbackSummary:\", error);\n        summary = \"Analysis completed with available data. Some sources may be unavailable.\";\n    }\n    return summary || \"Analysis completed with available data. Some sources may be unavailable.\";\n}\n// Generate a dynamic conclusion based on the query and data\nfunction generateDynamicConclusion(query, data) {\n    const queryLower = query.toLowerCase();\n    let conclusion = \"\";\n    // Check if market is mostly up or down\n    let positiveChanges = 0;\n    let negativeChanges = 0;\n    // Count price changes direction\n    if (data.cryptoData && Array.isArray(data.cryptoData)) {\n        data.cryptoData.forEach((crypto)=>{\n            if (crypto?.priceChange24h > 0) positiveChanges++;\n            else if (crypto?.priceChange24h < 0) negativeChanges++;\n        });\n    }\n    // Count TVL changes direction\n    if (data.defiProjects && Array.isArray(data.defiProjects)) {\n        data.defiProjects.forEach((project)=>{\n            const change = project?.tvlChange24h || project?.tvlChange7d;\n            if (change > 0) positiveChanges++;\n            else if (change < 0) negativeChanges++;\n        });\n    }\n    const marketSentiment = positiveChanges > negativeChanges ? \"positive\" : negativeChanges > positiveChanges ? \"negative\" : \"mixed\";\n    // Generate conclusion based on query type\n    if (queryLower.includes(\"invest\") || queryLower.includes(\"buy\")) {\n        switch(marketSentiment){\n            case \"positive\":\n                conclusion = \"the market is showing mostly positive momentum. Consider researching projects with strong fundamentals and consistent growth before making investment decisions. Always diversify your portfolio and invest only what you can afford to lose.\";\n                break;\n            case \"negative\":\n                conclusion = \"the market is showing some bearish signals. Consider waiting for stability or look for projects that have shown resilience during downturns. Risk management should be prioritized in current conditions.\";\n                break;\n            default:\n                conclusion = \"the market shows mixed signals. Focus on projects with strong fundamentals and consider dollar-cost averaging rather than lump-sum investments given the current volatility.\";\n        }\n    } else if (queryLower.includes(\"trend\") || queryLower.includes(\"movement\")) {\n        switch(marketSentiment){\n            case \"positive\":\n                conclusion = \"the current trend appears bullish with most assets showing positive price action. Keep an eye on trading volumes and potential resistance levels that might indicate trend reversals.\";\n                break;\n            case \"negative\":\n                conclusion = \"the trend appears bearish in the short term with several assets showing price declines. Watch for potential support levels where reversals might occur.\";\n                break;\n            default:\n                conclusion = \"we're seeing consolidation across many assets with mixed signals. This often precedes significant market movements, so monitor key technical indicators for breakout signals.\";\n        }\n    } else {\n        switch(marketSentiment){\n            case \"positive\":\n                conclusion = \"the overall crypto market shows strength at the moment. Keep monitoring key resistance levels and news events that might impact this positive trend.\";\n                break;\n            case \"negative\":\n                conclusion = \"caution is advised as several assets are showing downward pressure. Consider watching key support levels and market catalysts that could reverse this trend.\";\n                break;\n            default:\n                conclusion = \"the market lacks clear direction at the moment. This might present opportunities for both entries and exits depending on your investment strategy and risk tolerance.\";\n        }\n    }\n    return conclusion;\n}\n// Refine / filter the data table when the user explicitly asks to compare a small set of tokens/projects.\nfunction refineComparisonTable(query, rawData, existing) {\n    try {\n        const q = query.toLowerCase();\n        if (!/compare|vs|versus/.test(q)) return existing; // only apply on comparison intent\n        // Extract explicit tokens (symbols) and project name words\n        const tokens = extractTokens(query); // returns uppercase symbols\n        const nameTargets = tokens.map((t)=>t.toLowerCase());\n        // Also capture common full names for ETH & BTC etc\n        const extraNameMap = {\n            \"ETH\": [\n                \"ethereum\"\n            ],\n            \"BTC\": [\n                \"bitcoin\"\n            ],\n            \"SOL\": [\n                \"solana\"\n            ],\n            \"BNB\": [\n                \"bnb\",\n                \"binance\"\n            ],\n            \"ADA\": [\n                \"cardano\"\n            ]\n        };\n        tokens.forEach((sym)=>{\n            (extraNameMap[sym] || []).forEach((n)=>nameTargets.push(n));\n        });\n        // If user only mentions two to five items, we restrict to them strictly.\n        if (tokens.length >= 2 && tokens.length <= 6) {\n            const filtered = existing.filter((r)=>{\n                const proj = r.project?.toLowerCase();\n                return nameTargets.some((t)=>proj.includes(t));\n            });\n            // If model returned unrelated rows and we lost everything, rebuild from raw crypto data for those tokens.\n            if (filtered.length === 0) {\n                const rebuilt = [];\n                (rawData.cryptoData || []).forEach((c)=>{\n                    if (tokens.includes(c.symbol)) {\n                        rebuilt.push({\n                            project: c.name,\n                            tvl: \"N/A\",\n                            tvlChange: \"N/A\",\n                            price: typeof c.price === \"number\" ? `$${c.price.toFixed(2)}` : \"N/A\",\n                            priceChange: typeof c.priceChange24h === \"number\" ? `${c.priceChange24h > 0 ? \"+\" : \"\"}${c.priceChange24h.toFixed(2)}%` : \"N/A\",\n                            sentiment: c.priceChange24h > 2 ? \"Positive\" : c.priceChange24h < -2 ? \"Negative\" : \"Neutral\",\n                            newsCount: c.symbol === \"ETH\" ? 20 : c.symbol === \"BTC\" ? 25 : 10\n                        });\n                    }\n                });\n                return rebuilt.slice(0, tokens.length);\n            }\n            // Preserve order of appearance in query by sorting filtered rows accordingly\n            const order = nameTargets;\n            filtered.sort((a, b)=>order.findIndex((t)=>a.project.toLowerCase().includes(t)) - order.findIndex((t)=>b.project.toLowerCase().includes(t)));\n            return filtered.slice(0, tokens.length);\n        }\n        return existing;\n    } catch (e) {\n        console.warn(\"refineComparisonTable failed, returning original table\", e);\n        return existing;\n    }\n}\nasync function generateInsights(query, data) {\n    try {\n        const prompt = `\r\nBased on the following crypto data, provide insights for the query: \"${query}\"\r\n\r\nData: ${JSON.stringify(data, null, 2)}\r\n\r\nProvide a concise, professional analysis focusing on:\r\n- Key trends and patterns\r\n- Notable changes in metrics\r\n- Potential implications for investors\r\n- Risk factors to consider\r\n`;\n        let retryCount = 0;\n        const maxRetries = 2;\n        let retryDelay = 1000; // Start with 1 second delay\n        while(retryCount <= maxRetries){\n            try {\n                const completion = await groq.chat.completions.create({\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: \"You are a crypto market analyst. Provide clear, actionable insights.\"\n                        },\n                        {\n                            role: \"user\",\n                            content: prompt\n                        }\n                    ],\n                    model: getCurrentModel(retryCount),\n                    temperature: 0.3,\n                    max_tokens: 1000\n                });\n                return completion.choices[0]?.message?.content || \"Unable to generate insights at this time.\";\n            } catch (retryError) {\n                const errorMessage = retryError instanceof Error ? retryError.message : \"Unknown error\";\n                const isCapacityError = errorMessage.includes(\"over capacity\");\n                const isRateLimitError = errorMessage.includes(\"rate_limit_exceeded\") || errorMessage.includes(\"Rate limit reached\");\n                console.error(`Groq API error (${isRateLimitError ? \"rate limit\" : isCapacityError ? \"capacity issue\" : \"general error\"}) - attempt ${retryCount + 1}/${maxRetries + 1}:`, retryError);\n                if (retryCount >= maxRetries) {\n                    throw retryError; // Re-throw if we've exhausted retries\n                }\n                // Calculate backoff delay with exponential increase\n                retryDelay *= 2;\n                console.log(`Retrying in ${retryDelay}ms with model fallback...`);\n                await new Promise((resolve)=>setTimeout(resolve, retryDelay));\n                retryCount++;\n            }\n        }\n        // This should never be reached due to the throw in the catch block above\n        return \"Unable to generate insights after multiple attempts.\";\n    } catch (error) {\n        console.error(\"Error generating insights:\", error);\n        // If this is a capacity/server error, update env flag to skip future API calls\n        if (error?.message?.includes(\"over capacity\") || error?.status === 503) {\n            console.log(\"⚠️ Groq API is over capacity, enabling fallback mode\");\n            process.env.SKIP_GROQ_API = \"true\";\n        }\n        // Generate a fallback insight message based on the query type\n        const queryLower = query.toLowerCase();\n        if (queryLower.includes(\"invest\") || queryLower.includes(\"buy\")) {\n            return \"Based on the available data, remember that cryptocurrency investments carry significant risk. Always conduct thorough research, diversify your portfolio, and invest only what you can afford to lose.\";\n        } else if (queryLower.includes(\"trend\") || queryLower.includes(\"market\")) {\n            return \"Market trends show varying patterns across different assets. Focus on fundamentals and long-term potential rather than short-term price movements when evaluating projects.\";\n        } else {\n            return \"The crypto market is constantly evolving. Stay informed about project developments, regulatory changes, and broader market conditions to make better decisions.\";\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/groq.ts\n");

/***/ })

};
;