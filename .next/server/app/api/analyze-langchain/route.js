"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze-langchain/route";
exports.ids = ["app/api/analyze-langchain/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-langchain%2Froute&page=%2Fapi%2Fanalyze-langchain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-langchain%2Froute.ts&appDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-langchain%2Froute&page=%2Fapi%2Fanalyze-langchain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-langchain%2Froute.ts&appDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Windows_Desktop_Rover_projects_web3_ai_agent_app_api_analyze_langchain_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/analyze-langchain/route.ts */ \"(rsc)/./app/api/analyze-langchain/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze-langchain/route\",\n        pathname: \"/api/analyze-langchain\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze-langchain/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Windows\\\\Desktop\\\\Rover\\\\projects\\\\web3 ai agent\\\\app\\\\api\\\\analyze-langchain\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Windows_Desktop_Rover_projects_web3_ai_agent_app_api_analyze_langchain_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/analyze-langchain/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplLWxhbmdjaGFpbiUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYW5hbHl6ZS1sYW5nY2hhaW4lMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhbmFseXplLWxhbmdjaGFpbiUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNXaW5kb3dzJTVDRGVza3RvcCU1Q1JvdmVyJTVDcHJvamVjdHMlNUN3ZWIzJTIwYWklMjBhZ2VudCU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDV2luZG93cyU1Q0Rlc2t0b3AlNUNSb3ZlciU1Q3Byb2plY3RzJTVDd2ViMyUyMGFpJTIwYWdlbnQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2tEO0FBQy9IO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLXJlc2VhcmNoLWFzc2lzdGFudC8/NmU5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxXaW5kb3dzXFxcXERlc2t0b3BcXFxcUm92ZXJcXFxccHJvamVjdHNcXFxcd2ViMyBhaSBhZ2VudFxcXFxhcHBcXFxcYXBpXFxcXGFuYWx5emUtbGFuZ2NoYWluXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplLWxhbmdjaGFpbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FuYWx5emUtbGFuZ2NoYWluXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXplLWxhbmdjaGFpbi9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXFdpbmRvd3NcXFxcRGVza3RvcFxcXFxSb3ZlclxcXFxwcm9qZWN0c1xcXFx3ZWIzIGFpIGFnZW50XFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl6ZS1sYW5nY2hhaW5cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FuYWx5emUtbGFuZ2NoYWluL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-langchain%2Froute&page=%2Fapi%2Fanalyze-langchain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-langchain%2Froute.ts&appDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze-langchain/route.ts":
/*!********************************************!*\
  !*** ./app/api/analyze-langchain/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_langchain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/langchain */ \"(rsc)/./lib/langchain.ts\");\n\n\n// In-memory conversation storage (use Redis in production)\nconst conversations = new Map();\nasync function POST(request) {\n    try {\n        const { query, sources = [\n            \"langchain\"\n        ], mode = \"research\", conversationId } = await request.json();\n        if (!query || typeof query !== \"string\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Query is required and must be a string\"\n            }, {\n                status: 400\n            });\n        }\n        // Define runners for each source\n        const runners = {\n            langchain: async ()=>{\n                // Get or create conversation memory\n                let conversation;\n                let newConversationId = conversationId;\n                if (conversationId && conversations.has(conversationId)) {\n                    conversation = conversations.get(conversationId);\n                } else {\n                    newConversationId = Date.now().toString(36) + Math.random().toString(36).substring(2);\n                    conversation = new _lib_langchain__WEBPACK_IMPORTED_MODULE_1__.ConversationMemory();\n                    conversations.set(newConversationId, conversation);\n                }\n                conversation.addMessage(\"user\", query);\n                const result = await (0,_lib_langchain__WEBPACK_IMPORTED_MODULE_1__.analyzeWithLangChain)(query, mode);\n                conversation.addMessage(\"assistant\", result.summary);\n                result.conversationId = newConversationId;\n                return result;\n            }\n        };\n        // Run all sources in parallel\n        const results = await Promise.all(sources.map(async (source)=>{\n            try {\n                const result = await runners[source]();\n                return {\n                    source,\n                    result\n                };\n            } catch (error) {\n                return {\n                    source,\n                    error: error instanceof Error ? error.message : String(error)\n                };\n            }\n        }));\n        // Choose primary successful result (prefer langchain)\n        const primary = results.find((r)=>r.source === \"langchain\" && !(\"error\" in r)) || results.find((r)=>!(\"error\" in r));\n        // Optional formatted debug output (kept for troubleshooting)\n        const formatted = results.map((r)=>\"error\" in r && r.error ? `Source: ${r.source}\\nError: ${r.error}` : `Source: ${r.source}\\nResult: ${JSON.stringify(r.result, null, 2)}`).join(\"\\n\\n\");\n        if (primary && \"result\" in primary) {\n            const data = primary.result;\n            // Return backward-compatible shape expected by the UI\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                data,\n                conversationId,\n                debug: {\n                    output: formatted,\n                    sourcesTried: results.map((r)=>r.source)\n                }\n            });\n        }\n        // If no source succeeded\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"All sources failed\",\n            results\n        }, {\n            status: 502\n        });\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// GET endpoint to retrieve conversation history\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const conversationId = searchParams.get(\"conversationId\");\n        if (!conversationId || !conversations.has(conversationId)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Conversation not found\"\n            }, {\n                status: 404\n            });\n        }\n        const conversation = conversations.get(conversationId);\n        const history = conversation.getConversationHistory();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                conversationId,\n                history,\n                messageCount: history.split(\"\\n\").length\n            }\n        });\n    } catch (error) {\n        console.error(\"Error retrieving conversation:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// DELETE endpoint to clear conversation\nasync function DELETE(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const conversationId = searchParams.get(\"conversationId\");\n        if (conversationId && conversations.has(conversationId)) {\n            const conversation = conversations.get(conversationId);\n            conversation.clear();\n            conversations.delete(conversationId);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Conversation cleared successfully\"\n        });\n    } catch (error) {\n        console.error(\"Error clearing conversation:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU13QixPQUFPLEdBQUc7UUFDbEQsR0FBRztZQUFFdkIsUUFBUTtRQUFJO0lBQ25CO0FBQ0Y7QUFFQSx3Q0FBd0M7QUFDakMsZUFBZThDLE9BQU90RCxPQUFvQjtJQUMvQyxJQUFJO1FBQ0YsTUFBTSxFQUFFNkMsWUFBWSxFQUFFLEdBQUcsSUFBSUMsSUFBSTlDLFFBQVErQyxHQUFHO1FBQzVDLE1BQU0zQyxpQkFBaUJ5QyxhQUFhL0IsR0FBRyxDQUFDO1FBRXhDLElBQUlWLGtCQUFrQlAsY0FBY2dCLEdBQUcsQ0FBQ1QsaUJBQWlCO1lBQ3ZELE1BQU1PLGVBQWVkLGNBQWNpQixHQUFHLENBQUNWO1lBQ3ZDTyxhQUFhNEMsS0FBSztZQUNsQjFELGNBQWMyRCxNQUFNLENBQUNwRDtRQUN2QjtRQUVBLE9BQU9WLHFEQUFZQSxDQUFDVyxJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVHlCLFNBQVM7UUFDWDtJQUVGLEVBQUUsT0FBT3hCLE9BQU87UUFDZDhDLFFBQVE5QyxLQUFLLENBQUMsZ0NBQWdDQTtRQUU5QyxPQUFPYixxREFBWUEsQ0FBQ1csSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RDLE9BQU9BLGlCQUFpQnVCLFFBQVF2QixNQUFNd0IsT0FBTyxHQUFHO1FBQ2xELEdBQUc7WUFBRXZCLFFBQVE7UUFBSTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J5cHRvLXJlc2VhcmNoLWFzc2lzdGFudC8uL2FwcC9hcGkvYW5hbHl6ZS1sYW5nY2hhaW4vcm91dGUudHM/MjE5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBhbmFseXplV2l0aExhbmdDaGFpbiwgQ29udmVyc2F0aW9uTWVtb3J5IH0gZnJvbSAnQC9saWIvbGFuZ2NoYWluJztcclxuXHJcbi8vIEluLW1lbW9yeSBjb252ZXJzYXRpb24gc3RvcmFnZSAodXNlIFJlZGlzIGluIHByb2R1Y3Rpb24pXHJcbmNvbnN0IGNvbnZlcnNhdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgQ29udmVyc2F0aW9uTWVtb3J5PigpO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBxdWVyeSwgc291cmNlcyA9IFsnbGFuZ2NoYWluJ10sIG1vZGUgPSAncmVzZWFyY2gnLCBjb252ZXJzYXRpb25JZCB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XHJcblxyXG4gICAgaWYgKCFxdWVyeSB8fCB0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1F1ZXJ5IGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nJyB9LCB7IHN0YXR1czogNDAwIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmluZSBydW5uZXJzIGZvciBlYWNoIHNvdXJjZVxyXG4gICAgY29uc3QgcnVubmVyczogUmVjb3JkPHN0cmluZywgKCkgPT4gUHJvbWlzZTxhbnk+PiA9IHtcclxuICAgICAgbGFuZ2NoYWluOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSBjb252ZXJzYXRpb24gbWVtb3J5XHJcbiAgICAgICAgbGV0IGNvbnZlcnNhdGlvbjogQ29udmVyc2F0aW9uTWVtb3J5O1xyXG4gICAgICAgIGxldCBuZXdDb252ZXJzYXRpb25JZCA9IGNvbnZlcnNhdGlvbklkO1xyXG4gICAgICAgIGlmIChjb252ZXJzYXRpb25JZCAmJiBjb252ZXJzYXRpb25zLmhhcyhjb252ZXJzYXRpb25JZCkpIHtcclxuICAgICAgICAgIGNvbnZlcnNhdGlvbiA9IGNvbnZlcnNhdGlvbnMuZ2V0KGNvbnZlcnNhdGlvbklkKSE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5ld0NvbnZlcnNhdGlvbklkID0gRGF0ZS5ub3coKS50b1N0cmluZygzNikgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMik7XHJcbiAgICAgICAgICBjb252ZXJzYXRpb24gPSBuZXcgQ29udmVyc2F0aW9uTWVtb3J5KCk7XHJcbiAgICAgICAgICBjb252ZXJzYXRpb25zLnNldChuZXdDb252ZXJzYXRpb25JZCwgY29udmVyc2F0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udmVyc2F0aW9uLmFkZE1lc3NhZ2UoJ3VzZXInLCBxdWVyeSk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl6ZVdpdGhMYW5nQ2hhaW4ocXVlcnksIG1vZGUpO1xyXG4gICAgICAgIGNvbnZlcnNhdGlvbi5hZGRNZXNzYWdlKCdhc3Npc3RhbnQnLCByZXN1bHQuc3VtbWFyeSk7XHJcbiAgICAgICAgcmVzdWx0LmNvbnZlcnNhdGlvbklkID0gbmV3Q29udmVyc2F0aW9uSWQ7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfSxcclxuICAgICAgLy8gQWRkIG90aGVyIHNvdXJjZXMgaWYgbmVlZGVkXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFJ1biBhbGwgc291cmNlcyBpbiBwYXJhbGxlbFxyXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICBzb3VyY2VzLm1hcChhc3luYyAoc291cmNlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcnVubmVyc1tzb3VyY2VdKCk7XHJcbiAgICAgICAgICByZXR1cm4geyBzb3VyY2UsIHJlc3VsdCB9O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICByZXR1cm4geyBzb3VyY2UsIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIENob29zZSBwcmltYXJ5IHN1Y2Nlc3NmdWwgcmVzdWx0IChwcmVmZXIgbGFuZ2NoYWluKVxyXG4gICAgY29uc3QgcHJpbWFyeSA9IHJlc3VsdHMuZmluZChyID0+IHIuc291cmNlID09PSAnbGFuZ2NoYWluJyAmJiAhKCdlcnJvcicgaW4gcikpXHJcbiAgICAgIHx8IHJlc3VsdHMuZmluZChyID0+ICEoJ2Vycm9yJyBpbiByKSk7XHJcblxyXG4gICAgLy8gT3B0aW9uYWwgZm9ybWF0dGVkIGRlYnVnIG91dHB1dCAoa2VwdCBmb3IgdHJvdWJsZXNob290aW5nKVxyXG4gICAgY29uc3QgZm9ybWF0dGVkID0gcmVzdWx0cy5tYXAociA9PlxyXG4gICAgICAnZXJyb3InIGluIHIgJiYgci5lcnJvclxyXG4gICAgICAgID8gYFNvdXJjZTogJHtyLnNvdXJjZX1cXG5FcnJvcjogJHtyLmVycm9yfWBcclxuICAgICAgICA6IGBTb3VyY2U6ICR7ci5zb3VyY2V9XFxuUmVzdWx0OiAke0pTT04uc3RyaW5naWZ5KChyIGFzIGFueSkucmVzdWx0LCBudWxsLCAyKX1gXHJcbiAgICApLmpvaW4oJ1xcblxcbicpO1xyXG5cclxuICAgIGlmIChwcmltYXJ5ICYmICdyZXN1bHQnIGluIHByaW1hcnkpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IChwcmltYXJ5IGFzIGFueSkucmVzdWx0O1xyXG4gICAgICAvLyBSZXR1cm4gYmFja3dhcmQtY29tcGF0aWJsZSBzaGFwZSBleHBlY3RlZCBieSB0aGUgVUlcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogdHJ1ZSwgZGF0YSwgY29udmVyc2F0aW9uSWQsIGRlYnVnOiB7IG91dHB1dDogZm9ybWF0dGVkLCBzb3VyY2VzVHJpZWQ6IHJlc3VsdHMubWFwKHI9PnIuc291cmNlKSB9IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIG5vIHNvdXJjZSBzdWNjZWVkZWRcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0FsbCBzb3VyY2VzIGZhaWxlZCcsIHJlc3VsdHMgfSwgeyBzdGF0dXM6IDUwMiB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyB9LCB7IHN0YXR1czogNTAwIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLy8gR0VUIGVuZHBvaW50IHRvIHJldHJpZXZlIGNvbnZlcnNhdGlvbiBoaXN0b3J5XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gICAgY29uc3QgY29udmVyc2F0aW9uSWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjb252ZXJzYXRpb25JZCcpO1xyXG5cclxuICAgIGlmICghY29udmVyc2F0aW9uSWQgfHwgIWNvbnZlcnNhdGlvbnMuaGFzKGNvbnZlcnNhdGlvbklkKSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiAnQ29udmVyc2F0aW9uIG5vdCBmb3VuZCdcclxuICAgICAgfSwgeyBzdGF0dXM6IDQwNCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb252ZXJzYXRpb24gPSBjb252ZXJzYXRpb25zLmdldChjb252ZXJzYXRpb25JZCkhO1xyXG4gICAgY29uc3QgaGlzdG9yeSA9IGNvbnZlcnNhdGlvbi5nZXRDb252ZXJzYXRpb25IaXN0b3J5KCk7XHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGNvbnZlcnNhdGlvbklkLFxyXG4gICAgICAgIGhpc3RvcnksXHJcbiAgICAgICAgbWVzc2FnZUNvdW50OiBoaXN0b3J5LnNwbGl0KCdcXG4nKS5sZW5ndGhcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXRyaWV2aW5nIGNvbnZlcnNhdGlvbjonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBERUxFVEUgZW5kcG9pbnQgdG8gY2xlYXIgY29udmVyc2F0aW9uXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBERUxFVEUocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gICAgY29uc3QgY29udmVyc2F0aW9uSWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjb252ZXJzYXRpb25JZCcpO1xyXG5cclxuICAgIGlmIChjb252ZXJzYXRpb25JZCAmJiBjb252ZXJzYXRpb25zLmhhcyhjb252ZXJzYXRpb25JZCkpIHtcclxuICAgICAgY29uc3QgY29udmVyc2F0aW9uID0gY29udmVyc2F0aW9ucy5nZXQoY29udmVyc2F0aW9uSWQpITtcclxuICAgICAgY29udmVyc2F0aW9uLmNsZWFyKCk7XHJcbiAgICAgIGNvbnZlcnNhdGlvbnMuZGVsZXRlKGNvbnZlcnNhdGlvbklkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICBtZXNzYWdlOiAnQ29udmVyc2F0aW9uIGNsZWFyZWQgc3VjY2Vzc2Z1bGx5J1xyXG4gICAgfSk7XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjbGVhcmluZyBjb252ZXJzYXRpb246JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXHJcbiAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiYW5hbHl6ZVdpdGhMYW5nQ2hhaW4iLCJDb252ZXJzYXRpb25NZW1vcnkiLCJjb252ZXJzYXRpb25zIiwiTWFwIiwiUE9TVCIsInJlcXVlc3QiLCJxdWVyeSIsInNvdXJjZXMiLCJtb2RlIiwiY29udmVyc2F0aW9uSWQiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwic3RhdHVzIiwicnVubmVycyIsImxhbmdjaGFpbiIsImNvbnZlcnNhdGlvbiIsIm5ld0NvbnZlcnNhdGlvbklkIiwiaGFzIiwiZ2V0IiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0cmluZyIsInNldCIsImFkZE1lc3NhZ2UiLCJyZXN1bHQiLCJzdW1tYXJ5IiwicmVzdWx0cyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJzb3VyY2UiLCJFcnJvciIsIm1lc3NhZ2UiLCJTdHJpbmciLCJwcmltYXJ5IiwiZmluZCIsInIiLCJmb3JtYXR0ZWQiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsImRhdGEiLCJkZWJ1ZyIsIm91dHB1dCIsInNvdXJjZXNUcmllZCIsIkdFVCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsImhpc3RvcnkiLCJnZXRDb252ZXJzYXRpb25IaXN0b3J5IiwibWVzc2FnZUNvdW50Iiwic3BsaXQiLCJsZW5ndGgiLCJjb25zb2xlIiwiREVMRVRFIiwiY2xlYXIiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze-langchain/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchAllData: () => (/* binding */ fetchAllData),\n/* harmony export */   fetchCryptoData: () => (/* binding */ fetchCryptoData),\n/* harmony export */   fetchDeFiProjects: () => (/* binding */ fetchDeFiProjects),\n/* harmony export */   fetchDuneData: () => (/* binding */ fetchDuneData),\n/* harmony export */   fetchEtherscanContractSource: () => (/* binding */ fetchEtherscanContractSource),\n/* harmony export */   fetchEtherscanGasPrice: () => (/* binding */ fetchEtherscanGasPrice),\n/* harmony export */   fetchEtherscanTokenBalance: () => (/* binding */ fetchEtherscanTokenBalance),\n/* harmony export */   fetchEtherscanTokenInfo: () => (/* binding */ fetchEtherscanTokenInfo),\n/* harmony export */   fetchEtherscanTransactions: () => (/* binding */ fetchEtherscanTransactions),\n/* harmony export */   fetchNewsEvents: () => (/* binding */ fetchNewsEvents),\n/* harmony export */   fetchSocialSentiment: () => (/* binding */ fetchSocialSentiment)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\n// API Keys - In production, these should be environment variables\nconst COINMARKETCAP_API_KEY = process.env.COINMARKETCAP_API_KEY || \"your-coinmarketcap-api-key\";\n// DeFiLlama doesn't require an API key - it's a free public API\nconst DUNE_API_KEY = process.env.DUNE_API_KEY || \"your-dune-api-key\";\nconst ARTEMIS_API_KEY = process.env.ARTEMIS_API_KEY || \"your-artemis-api-key\";\nconst NANSEN_API_KEY = process.env.NANSEN_API_KEY || \"your-nansen-api-key\";\nconst ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || \"your-etherscan-api-key\";\n// CoinMarketCap API with fallback to CoinGecko\nasync function fetchCryptoData(symbols) {\n    try {\n        // First try CoinMarketCap if we have a valid API key\n        if (COINMARKETCAP_API_KEY && COINMARKETCAP_API_KEY !== \"your-coinmarketcap-api-key\") {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest\", {\n                headers: {\n                    \"X-CMC_PRO_API_KEY\": COINMARKETCAP_API_KEY\n                },\n                params: {\n                    symbol: symbols.join(\",\"),\n                    convert: \"USD\"\n                }\n            });\n            const data = response.data.data;\n            return Object.values(data).map((crypto)=>({\n                    id: crypto.id.toString(),\n                    name: crypto.name,\n                    symbol: crypto.symbol,\n                    price: crypto.quote.USD.price,\n                    priceChange24h: crypto.quote.USD.percent_change_24h,\n                    marketCap: crypto.quote.USD.market_cap,\n                    volume24h: crypto.quote.USD.volume_24h,\n                    circulatingSupply: crypto.circulating_supply\n                }));\n        }\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n        const isNetworkError = errorMessage.includes(\"network\") || errorMessage.includes(\"timeout\") || errorMessage.includes(\"ECONNREFUSED\");\n        const isRateLimitError = errorMessage.includes(\"429\") || errorMessage.includes(\"rate limit\") || errorMessage.includes(\"too many requests\");\n        console.error(`CoinMarketCap API failed (${isNetworkError ? \"network issue\" : isRateLimitError ? \"rate limit\" : \"general error\"}): ${errorMessage}`);\n        console.log(\"\\uD83D\\uDD04 Switching to CoinGecko fallback...\");\n    }\n    // Fallback to CoinGecko (free API)\n    try {\n        console.log(\"\\uD83D\\uDD04 Fetching real crypto data from CoinGecko...\");\n        // Add random delay to avoid rate limiting (between 100-300ms)\n        await new Promise((resolve)=>setTimeout(resolve, 100 + Math.random() * 200));\n        // More comprehensive mapping including common variations of names\n        const mapping = {\n            \"BTC\": \"bitcoin\",\n            \"ETH\": \"ethereum\",\n            \"USDT\": \"tether\",\n            \"USDC\": \"usd-coin\",\n            \"BNB\": \"binancecoin\",\n            \"ADA\": \"cardano\",\n            \"SOL\": \"solana\",\n            \"DOT\": \"polkadot\",\n            \"AVAX\": \"avalanche-2\",\n            \"MATIC\": \"matic-network\",\n            \"UNI\": \"uniswap\",\n            \"LINK\": \"chainlink\",\n            \"AAVE\": \"aave\",\n            \"COMP\": \"compound-governance-token\",\n            \"MKR\": \"maker\",\n            \"CRV\": \"curve-dao-token\",\n            \"SUSHI\": \"sushi\",\n            \"YFI\": \"yearn-finance\",\n            \"SNX\": \"havven\",\n            \"LDO\": \"lido-dao\",\n            \"CAKE\": \"pancakeswap-token\",\n            \"BAL\": \"balancer\",\n            \"1INCH\": \"1inch\",\n            \"DYDX\": \"dydx\",\n            \"GMX\": \"gmx\",\n            \"PERP\": \"perpetual-protocol\",\n            \"JOE\": \"trader-joe\",\n            \"CVX\": \"convex-finance\",\n            \"FXS\": \"frax-share\"\n        };\n        const coinGeckoIds = symbols.map((symbol)=>mapping[symbol] || symbol.toLowerCase());\n        console.log(\"\\uD83D\\uDD0D Requesting CoinGecko data for:\", coinGeckoIds);\n        // Set a timeout for the API request\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 5000); // 5 second timeout\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.coingecko.com/api/v3/simple/price\", {\n            params: {\n                ids: coinGeckoIds.join(\",\"),\n                vs_currencies: \"usd\",\n                include_24hr_change: \"true\",\n                include_market_cap: \"true\",\n                include_24hr_vol: \"true\"\n            },\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        const data = response.data;\n        console.log(\"✅ CoinGecko response:\", Object.keys(data));\n        return Object.entries(data).map(([id, priceData])=>{\n            // Find the original symbol\n            const symbol = Object.entries({\n                \"bitcoin\": \"BTC\",\n                \"ethereum\": \"ETH\",\n                \"tether\": \"USDT\",\n                \"usd-coin\": \"USDC\",\n                \"binancecoin\": \"BNB\",\n                \"cardano\": \"ADA\",\n                \"solana\": \"SOL\",\n                \"polkadot\": \"DOT\",\n                \"avalanche-2\": \"AVAX\",\n                \"matic-network\": \"MATIC\",\n                \"uniswap\": \"UNI\",\n                \"chainlink\": \"LINK\",\n                \"aave\": \"AAVE\",\n                \"compound-governance-token\": \"COMP\",\n                \"maker\": \"MKR\",\n                \"curve-dao-token\": \"CRV\",\n                \"sushi\": \"SUSHI\",\n                \"yearn-finance\": \"YFI\",\n                \"havven\": \"SNX\",\n                \"lido-dao\": \"LDO\"\n            }).find(([geckoId])=>geckoId === id)?.[1] || id.toUpperCase();\n            return {\n                id: id,\n                name: id.charAt(0).toUpperCase() + id.slice(1).replace(\"-\", \" \"),\n                symbol: symbol,\n                price: priceData.usd || 0,\n                priceChange24h: priceData.usd_24h_change || 0,\n                marketCap: priceData.usd_market_cap || 0,\n                volume24h: priceData.usd_24h_vol || 0,\n                circulatingSupply: 0\n            };\n        });\n    } catch (error) {\n        console.error(\"Error fetching crypto data from CoinGecko:\", error);\n        // Final fallback with realistic but variable mock data\n        return symbols.map((symbol)=>{\n            // Base prices with some realistic values\n            const basePrices = {\n                \"BTC\": {\n                    price: 65432.10,\n                    change: 2.45\n                },\n                \"ETH\": {\n                    price: 3234.56,\n                    change: -1.23\n                },\n                \"USDT\": {\n                    price: 1.00,\n                    change: 0.01\n                },\n                \"USDC\": {\n                    price: 1.00,\n                    change: -0.02\n                },\n                \"BNB\": {\n                    price: 532.45,\n                    change: 1.89\n                },\n                \"UNI\": {\n                    price: 12.34,\n                    change: -3.45\n                },\n                \"AAVE\": {\n                    price: 87.65,\n                    change: 4.56\n                },\n                \"COMP\": {\n                    price: 123.45,\n                    change: -2.34\n                },\n                \"MKR\": {\n                    price: 1234.56,\n                    change: 1.23\n                },\n                \"LDO\": {\n                    price: 2.34,\n                    change: 5.67\n                }\n            };\n            // Get base price or generate random one between 1-500\n            const baseData = basePrices[symbol] || {\n                price: 1 + Math.random() * 500,\n                change: Math.random() * 20 - 10\n            };\n            // Add randomness to price (±5%)\n            const priceVariation = baseData.price * (0.95 + Math.random() * 0.1);\n            // Add randomness to change (-5% to +5% from base)\n            const changeVariation = baseData.change + (Math.random() * 10 - 5);\n            // Add timestamp to the name to show it's dynamic\n            const now = new Date();\n            const timeStr = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;\n            return {\n                id: symbol.toLowerCase(),\n                name: `${symbol} (Updated: ${timeStr})`,\n                symbol: symbol,\n                price: priceVariation,\n                priceChange24h: changeVariation,\n                marketCap: priceVariation * (900000 + Math.random() * 200000),\n                volume24h: priceVariation * (45000 + Math.random() * 10000),\n                circulatingSupply: 900000 + Math.floor(Math.random() * 200000)\n            };\n        });\n    }\n}\n// DeFiLlama API\nasync function fetchDeFiProjects() {\n    try {\n        console.log(\"\\uD83D\\uDD04 Fetching real DeFi data from DeFiLlama...\");\n        // Set a timeout for the API request\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 8000); // 8 second timeout\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.llama.fi/protocols\", {\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!response.data || !Array.isArray(response.data)) {\n            throw new Error(\"Invalid response format from DeFiLlama API\");\n        }\n        const protocols = response.data;\n        console.log(`✅ DeFiLlama returned ${protocols.length} protocols`);\n        // Add dynamic randomness to which protocols we show first (within top 100)\n        const topN = 100;\n        const startIndex = Math.floor(Math.random() * 10); // Randomly start from 0-9\n        const protocolsToUse = protocols.slice(startIndex, startIndex + 50);\n        return protocolsToUse.map((protocol)=>({\n                id: protocol.id,\n                name: protocol.name,\n                symbol: protocol.symbol || \"N/A\",\n                tvl: protocol.tvl || 0,\n                tvlChange24h: protocol.change_1h || 0,\n                tvlChange7d: protocol.change_7d || 0,\n                chains: protocol.chains || [],\n                category: protocol.category || \"Unknown\",\n                url: protocol.url || \"\"\n            }));\n    } catch (error) {\n        console.error(\"❌ Error fetching DeFi projects from DeFiLlama:\", error);\n        // Fallback to dynamic mock data when API fails\n        console.log(\"\\uD83D\\uDD04 Using dynamic fallback DeFi data...\");\n        // Create a timestamp to show data is dynamic\n        const now = new Date();\n        const timeStr = `${now.getHours()}:${now.getMinutes()}`;\n        // List of possible protocols to show (we'll select some randomly)\n        const possibleProtocols = [\n            {\n                id: \"uniswap\",\n                name: \"Uniswap\",\n                symbol: \"UNI\",\n                baseTvl: 18116400000,\n                category: \"Dexes\",\n                url: \"https://uniswap.org\",\n                chains: [\n                    \"Ethereum\",\n                    \"Polygon\",\n                    \"Arbitrum\",\n                    \"Optimism\"\n                ]\n            },\n            {\n                id: \"aave-v3\",\n                name: \"AAVE V3\",\n                symbol: \"AAVE\",\n                baseTvl: 3584200000,\n                category: \"Lending\",\n                url: \"https://aave.com\",\n                chains: [\n                    \"Ethereum\",\n                    \"Polygon\",\n                    \"Avalanche\"\n                ]\n            },\n            {\n                id: \"lido\",\n                name: \"Lido\",\n                symbol: \"LDO\",\n                baseTvl: 3407600000,\n                category: \"Liquid Staking\",\n                url: \"https://lido.fi\",\n                chains: [\n                    \"Ethereum\"\n                ]\n            },\n            {\n                id: \"curve\",\n                name: \"Curve Finance\",\n                symbol: \"CRV\",\n                baseTvl: 4300000000,\n                category: \"Dexes\",\n                url: \"https://curve.fi\",\n                chains: [\n                    \"Ethereum\",\n                    \"Polygon\",\n                    \"Arbitrum\"\n                ]\n            },\n            {\n                id: \"maker\",\n                name: \"MakerDAO\",\n                symbol: \"MKR\",\n                baseTvl: 2700000000,\n                category: \"CDP\",\n                url: \"https://makerdao.com\",\n                chains: [\n                    \"Ethereum\"\n                ]\n            },\n            {\n                id: \"compound\",\n                name: \"Compound\",\n                symbol: \"COMP\",\n                baseTvl: 1900000000,\n                category: \"Lending\",\n                url: \"https://compound.finance\",\n                chains: [\n                    \"Ethereum\"\n                ]\n            },\n            {\n                id: \"pancakeswap\",\n                name: \"PancakeSwap\",\n                symbol: \"CAKE\",\n                baseTvl: 1600000000,\n                category: \"Dexes\",\n                url: \"https://pancakeswap.finance\",\n                chains: [\n                    \"BSC\",\n                    \"Ethereum\"\n                ]\n            },\n            {\n                id: \"sushi\",\n                name: \"SushiSwap\",\n                symbol: \"SUSHI\",\n                baseTvl: 1100000000,\n                category: \"Dexes\",\n                url: \"https://sushi.com\",\n                chains: [\n                    \"Ethereum\",\n                    \"Polygon\",\n                    \"Arbitrum\"\n                ]\n            }\n        ];\n        // Randomly select 5-8 protocols and generate dynamic data for them\n        const numProtocols = 5 + Math.floor(Math.random() * 4);\n        // Shuffle the array to randomize which protocols appear first\n        const shuffledProtocols = [\n            ...possibleProtocols\n        ].sort(()=>0.5 - Math.random());\n        const selectedProtocols = shuffledProtocols.slice(0, numProtocols);\n        // Generate dynamic data for each selected protocol\n        return selectedProtocols.map((protocol)=>{\n            // Add variance to TVL (±20%)\n            const tvlVariance = protocol.baseTvl * (0.8 + Math.random() * 0.4);\n            // Generate random 24h change (-5% to +5%)\n            const change24h = Math.random() * 10 - 5;\n            // Generate random 7d change (-10% to +10%)\n            const change7d = Math.random() * 20 - 10;\n            return {\n                id: protocol.id,\n                name: `${protocol.name} (${timeStr})`,\n                symbol: protocol.symbol,\n                tvl: tvlVariance,\n                tvlChange24h: change24h,\n                tvlChange7d: change7d,\n                chains: protocol.chains,\n                category: protocol.category,\n                url: protocol.url\n            };\n        });\n    }\n}\n// Dune Analytics API (simulated - requires authentication)\nasync function fetchDuneData(query) {\n    try {\n        // This is a simplified version. Real Dune API requires authentication\n        if (!DUNE_API_KEY || DUNE_API_KEY === \"your-dune-api-key\") {\n            return [];\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`https://api.dune.com/api/v1/query/execution`, {\n            headers: {\n                \"X-DUNE-API-KEY\": DUNE_API_KEY\n            },\n            params: {\n                query\n            },\n            validateStatus: ()=>true\n        });\n        if (response.status === 403) {\n            console.warn(\"⚠️ Dune API 403 (likely plan limitation). Returning fallback duneData.\");\n            return [\n                {\n                    type: \"dune_fallback\",\n                    reason: \"forbidden_or_plan_limit\",\n                    queryFragment: query.slice(0, 120),\n                    timestamp: new Date().toISOString()\n                }\n            ];\n        }\n        if (response.status >= 400) {\n            console.warn(\"⚠️ Dune API error status\", response.status, response.data?.error);\n            return [];\n        }\n        return response.data.result?.rows || [];\n    } catch (error) {\n        console.error(\"Error fetching Dune data:\", error);\n        return [];\n    }\n}\n// Social Sentiment API (enhanced with realistic mock data)\nasync function fetchSocialSentiment(projects) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Generating social sentiment data for\", projects);\n        // Base sentiment data to provide some consistency between projects\n        const baseSentimentData = {\n            \"Uniswap\": {\n                baseSentiment: \"neutral\",\n                baseScore: -0.09\n            },\n            \"Aave\": {\n                baseSentiment: \"neutral\",\n                baseScore: 0.64\n            },\n            \"Compound\": {\n                baseSentiment: \"neutral\",\n                baseScore: 0.72\n            },\n            \"MakerDAO\": {\n                baseSentiment: \"positive\",\n                baseScore: 0.37\n            },\n            \"Lido\": {\n                baseSentiment: \"positive\",\n                baseScore: 0.45\n            },\n            \"Curve\": {\n                baseSentiment: \"neutral\",\n                baseScore: 0.12\n            },\n            \"PancakeSwap\": {\n                baseSentiment: \"neutral\",\n                baseScore: -0.15\n            },\n            \"SushiSwap\": {\n                baseSentiment: \"negative\",\n                baseScore: -0.28\n            }\n        };\n        // Time-based variance to simulate changing sentiment\n        const now = new Date();\n        const hourOfDay = now.getHours();\n        const dayModifier = Math.sin((now.getDate() * 24 + hourOfDay) / 30) * 0.3; // Changes throughout the day\n        // Current timestamp to show data is dynamic\n        const timeStr = `${now.getHours()}:${now.getMinutes().toString().padStart(2, \"0\")}`;\n        // Generate dynamic sentiment data for each project\n        const result = [];\n        for (const project of projects){\n            const baseData = baseSentimentData[project];\n            // Generate time-variable sentiment data\n            let sentimentScore = 0;\n            let sentimentCategory;\n            if (baseData) {\n                // Base score with time-based variance\n                sentimentScore = baseData.baseScore + dayModifier + (Math.random() * 0.4 - 0.2);\n                // Determine sentiment category based on current score\n                if (sentimentScore > 0.2) sentimentCategory = \"positive\";\n                else if (sentimentScore < -0.2) sentimentCategory = \"negative\";\n                else sentimentCategory = \"neutral\";\n            } else {\n                // Random sentiment for unknown projects\n                sentimentScore = Math.random() * 2 - 1 + dayModifier;\n                if (sentimentScore > 0.2) sentimentCategory = \"positive\";\n                else if (sentimentScore < -0.2) sentimentCategory = \"negative\";\n                else sentimentCategory = \"neutral\";\n            }\n            // Generate dynamic mention count\n            const mentions = Math.floor(150 + Math.random() * 600 + hourOfDay * 10);\n            result.push({\n                project: `${project} (${timeStr})`,\n                sentiment: sentimentCategory,\n                score: sentimentScore,\n                mentions: mentions,\n                sources: [\n                    \"Twitter\",\n                    \"Reddit\",\n                    \"Telegram\"\n                ]\n            });\n        }\n        return result;\n    } catch (error) {\n        console.error(\"Error fetching social sentiment:\", error);\n        return [];\n    }\n}\n// News API (enhanced with realistic mock data)\nasync function fetchNewsEvents(keywords) {\n    try {\n        // Enhanced mock news data with realistic events\n        const mockNewsTemplates = [\n            {\n                template: \"{project} announces major protocol upgrade with improved yields\",\n                sentiment: \"positive\"\n            },\n            {\n                template: \"{project} experiences record TVL growth amid market rally\",\n                sentiment: \"positive\"\n            },\n            {\n                template: \"{project} partners with leading institution for DeFi expansion\",\n                sentiment: \"positive\"\n            },\n            {\n                template: \"Security audit reveals minor vulnerabilities in {project} smart contracts\",\n                sentiment: \"neutral\"\n            },\n            {\n                template: \"{project} implements new governance proposal affecting token economics\",\n                sentiment: \"neutral\"\n            },\n            {\n                template: \"Market volatility impacts {project} liquidity pools temporarily\",\n                sentiment: \"negative\"\n            }\n        ];\n        const newsEvents = [];\n        keywords.forEach((keyword)=>{\n            // Generate 1-2 news events per keyword\n            const numEvents = Math.floor(Math.random() * 2) + 1;\n            for(let i = 0; i < numEvents; i++){\n                const template = mockNewsTemplates[Math.floor(Math.random() * mockNewsTemplates.length)];\n                const title = template.template.replace(\"{project}\", keyword);\n                newsEvents.push({\n                    title: title,\n                    description: `Recent developments in the ${keyword} ecosystem show significant market impact and community engagement.`,\n                    source: [\n                        \"CoinDesk\",\n                        \"CoinTelegraph\",\n                        \"DeFi Pulse\",\n                        \"The Block\"\n                    ][Math.floor(Math.random() * 4)],\n                    url: `https://news.crypto/${keyword.toLowerCase().replace(\" \", \"-\")}`,\n                    publishedAt: new Date(Date.now() - Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000)).toISOString(),\n                    sentiment: template.sentiment\n                });\n            }\n        });\n        return newsEvents;\n    } catch (error) {\n        console.error(\"Error fetching news events:\", error);\n        return [];\n    }\n}\n// Combined data fetch function\nasync function fetchAllData(query) {\n    console.log(\"\\uD83D\\uDD0D Fetching data for query:\", query);\n    // Parse query to determine which tokens/projects to focus on\n    const queryLower = query.toLowerCase();\n    let focusTokens = [\n        \"BTC\",\n        \"ETH\"\n    ];\n    let focusProjects = [];\n    let useRandomOrder = true; // Randomize the order of results by default for variety\n    let useTrending = false; // Whether to focus on trending tokens/projects\n    let timeFrame = \"week\"; // Default time frame for analysis (day, week, month)\n    // Advanced natural language parsing for more precise data fetching\n    // Check for time frame context in query\n    if (queryLower.includes(\"today\") || queryLower.includes(\"24h\") || queryLower.includes(\"daily\") || queryLower.includes(\"last day\")) {\n        timeFrame = \"day\";\n    } else if (queryLower.includes(\"week\") || queryLower.includes(\"weekly\") || queryLower.includes(\"7 day\")) {\n        timeFrame = \"week\";\n    } else if (queryLower.includes(\"month\") || queryLower.includes(\"monthly\") || queryLower.includes(\"30 day\")) {\n        timeFrame = \"month\";\n    }\n    // Check for trending/popular context\n    if (queryLower.includes(\"trending\") || queryLower.includes(\"popular\") || queryLower.includes(\"hot\") || queryLower.includes(\"highest surge\") || queryLower.includes(\"biggest gain\") || queryLower.includes(\"most active\") || queryLower.includes(\"viral\")) {\n        useTrending = true;\n    }\n    // Check for specific sorting preferences\n    if (queryLower.includes(\"rank\") || queryLower.includes(\"top\") || queryLower.includes(\"highest\") || queryLower.includes(\"best performing\")) {\n        useRandomOrder = false; // User wants a ranked order, not random\n    }\n    // Check for quantity indicators\n    let topN = 5; // Default to 5 results\n    if (queryLower.includes(\"top 10\") || queryLower.match(/10 (best|highest|biggest)/)) {\n        topN = 10;\n    } else if (queryLower.includes(\"top 3\") || queryLower.match(/3 (best|highest|biggest)/)) {\n        topN = 3;\n    } else if (queryLower.match(/top (\\d+)/)) {\n        // Extract number from \"top N\" format\n        const match = queryLower.match(/top (\\d+)/);\n        if (match && match[1]) {\n            topN = parseInt(match[1]);\n        }\n    }\n    // Dynamic token selection based on query categories\n    if (queryLower.includes(\"defi\") || queryLower.includes(\"protocol\")) {\n        if (queryLower.includes(\"lending\") || queryLower.includes(\"borrow\")) {\n            focusTokens = [\n                ...focusTokens,\n                \"AAVE\",\n                \"COMP\",\n                \"MKR\"\n            ];\n            focusProjects = [\n                \"Aave\",\n                \"Compound\",\n                \"MakerDAO\",\n                \"Maple Finance\",\n                \"TrueFi\"\n            ];\n        } else if (queryLower.includes(\"dex\") || queryLower.includes(\"exchange\") || queryLower.includes(\"swap\")) {\n            focusTokens = [\n                ...focusTokens,\n                \"UNI\",\n                \"CAKE\",\n                \"CRV\",\n                \"SUSHI\",\n                \"BAL\",\n                \"DYDX\"\n            ];\n            focusProjects = [\n                \"Uniswap\",\n                \"PancakeSwap\",\n                \"Curve\",\n                \"SushiSwap\",\n                \"Balancer\",\n                \"dYdX\"\n            ];\n        } else if (queryLower.includes(\"staking\") || queryLower.includes(\"yield\")) {\n            focusTokens = [\n                ...focusTokens,\n                \"LDO\",\n                \"YFI\",\n                \"CAKE\",\n                \"CVX\",\n                \"MATIC\"\n            ];\n            focusProjects = [\n                \"Lido\",\n                \"Yearn Finance\",\n                \"PancakeSwap\",\n                \"Convex\",\n                \"Stake DAO\"\n            ];\n        } else if (queryLower.includes(\"synthetics\") || queryLower.includes(\"derivatives\")) {\n            focusTokens = [\n                ...focusTokens,\n                \"SNX\",\n                \"PERP\",\n                \"GMX\",\n                \"DYDX\"\n            ];\n            focusProjects = [\n                \"Synthetix\",\n                \"Perpetual Protocol\",\n                \"GMX\",\n                \"dYdX\"\n            ];\n        } else if (queryLower.includes(\"insurance\") || queryLower.includes(\"cover\")) {\n            focusTokens = [\n                ...focusTokens,\n                \"INSUR\",\n                \"NXM\",\n                \"UNN\"\n            ];\n            focusProjects = [\n                \"InsurAce\",\n                \"Nexus Mutual\",\n                \"Union\"\n            ];\n        } else {\n            // Generic DeFi focus with expanded list\n            focusTokens = [\n                ...focusTokens,\n                \"UNI\",\n                \"AAVE\",\n                \"COMP\",\n                \"MKR\",\n                \"CRV\",\n                \"SUSHI\",\n                \"YFI\",\n                \"SNX\",\n                \"LDO\",\n                \"CVX\",\n                \"FXS\",\n                \"BAL\"\n            ];\n            focusProjects = [\n                \"Uniswap\",\n                \"Aave\",\n                \"Compound\",\n                \"MakerDAO\",\n                \"Lido\",\n                \"Curve\",\n                \"SushiSwap\",\n                \"Yearn Finance\",\n                \"Convex\",\n                \"Frax\"\n            ];\n        }\n    }\n    // Add Layer 1/2 blockchain focus\n    if (queryLower.includes(\"layer 1\") || queryLower.includes(\"l1\") || queryLower.includes(\"blockchain\")) {\n        focusTokens = [\n            ...focusTokens,\n            \"SOL\",\n            \"AVAX\",\n            \"ADA\",\n            \"DOT\",\n            \"ATOM\",\n            \"NEAR\"\n        ];\n        focusProjects = [\n            ...focusProjects,\n            \"Solana\",\n            \"Avalanche\",\n            \"Cardano\",\n            \"Polkadot\",\n            \"Cosmos\",\n            \"NEAR Protocol\"\n        ];\n    }\n    if (queryLower.includes(\"layer 2\") || queryLower.includes(\"l2\") || queryLower.includes(\"scaling\")) {\n        focusTokens = [\n            ...focusTokens,\n            \"MATIC\",\n            \"ARB\",\n            \"OP\",\n            \"IMX\"\n        ];\n        focusProjects = [\n            ...focusProjects,\n            \"Polygon\",\n            \"Arbitrum\",\n            \"Optimism\",\n            \"Immutable X\"\n        ];\n    }\n    // Add NFT/Gaming focus\n    if (queryLower.includes(\"nft\") || queryLower.includes(\"gaming\") || queryLower.includes(\"metaverse\")) {\n        focusTokens = [\n            ...focusTokens,\n            \"MANA\",\n            \"SAND\",\n            \"AXS\",\n            \"IMX\",\n            \"APE\",\n            \"ILV\"\n        ];\n        focusProjects = [\n            ...focusProjects,\n            \"Decentraland\",\n            \"The Sandbox\",\n            \"Axie Infinity\",\n            \"ApeCoin\",\n            \"Illuvium\"\n        ];\n    }\n    // If no specific focus was detected, use trending tokens across categories\n    if (focusProjects.length <= 2 && !queryLower.includes(\"bitcoin\") && !queryLower.includes(\"ethereum\")) {\n        focusTokens = [\n            ...focusTokens,\n            \"UNI\",\n            \"SOL\",\n            \"AVAX\",\n            \"MATIC\",\n            \"LINK\",\n            \"DOT\",\n            \"AAVE\",\n            \"CRV\",\n            \"LDO\",\n            \"DYDX\",\n            \"GMX\"\n        ];\n        focusProjects = [\n            \"Uniswap\",\n            \"Lido\",\n            \"Aave\",\n            \"Curve\",\n            \"Solana\",\n            \"Avalanche\",\n            \"Polygon\",\n            \"Chainlink\",\n            \"dYdX\",\n            \"GMX\"\n        ];\n    }\n    // Deduplicate arrays\n    focusTokens = Array.from(new Set(focusTokens));\n    focusProjects = Array.from(new Set(focusProjects));\n    // Randomize or select only some tokens/projects to ensure variety in results\n    if (useRandomOrder) {\n        focusTokens = focusTokens.sort(()=>0.5 - Math.random()).slice(0, Math.min(focusTokens.length, 8 + Math.floor(Math.random() * 5)));\n        focusProjects = focusProjects.sort(()=>0.5 - Math.random()).slice(0, Math.min(focusProjects.length, 6 + Math.floor(Math.random() * 3)));\n    } else if (useTrending) {\n        // When trending is requested, we'll prioritize but still add some randomness\n        // (In a real app, this would fetch actual trending data)\n        const trendingTokens = [\n            \"ETH\",\n            \"SOL\",\n            \"AVAX\",\n            \"MATIC\",\n            \"LDO\",\n            \"ARB\",\n            \"OP\"\n        ].sort(()=>0.5 - Math.random()).slice(0, 3);\n        const trendingProjects = [\n            \"Lido\",\n            \"Uniswap\",\n            \"GMX\",\n            \"Arbitrum\",\n            \"Optimism\",\n            \"Solana\"\n        ].sort(()=>0.5 - Math.random()).slice(0, 3);\n        // Combine trending with some regular focus tokens\n        focusTokens = [\n            ...trendingTokens,\n            ...focusTokens.filter((t)=>!trendingTokens.includes(t))\n        ].slice(0, 10);\n        focusProjects = [\n            ...trendingProjects,\n            ...focusProjects.filter((p)=>!trendingProjects.includes(p))\n        ].slice(0, 8);\n    }\n    // Add timestamp to show dynamically generated data\n    const timestamp = new Date().toISOString();\n    console.log(`🕒 Query timestamp: ${timestamp}`);\n    console.log(`🎯 Focus tokens: ${focusTokens.join(\", \")}`);\n    console.log(`🎯 Focus projects: ${focusProjects.join(\", \")}`);\n    console.log(`⏰ Time frame: ${timeFrame}`);\n    console.log(`📈 Using trending data: ${useTrending}`);\n    console.log(`🔄 Using random order: ${useRandomOrder}`);\n    // Add random delay to make it feel more like real data processing\n    await new Promise((resolve)=>setTimeout(resolve, 300 + Math.random() * 700));\n    const [cryptoData, defiProjects] = await Promise.all([\n        fetchCryptoData(focusTokens),\n        fetchDeFiProjects()\n    ]);\n    console.log(\"\\uD83D\\uDCCA Fetched data summary:\", {\n        cryptoDataCount: cryptoData.length,\n        defiProjectsCount: defiProjects.length\n    });\n    console.log(\"\\uD83D\\uDCB0 Sample crypto data:\", cryptoData.slice(0, 3));\n    console.log(\"\\uD83C\\uDFDB️ Sample DeFi projects:\", defiProjects.slice(0, 3));\n    // Fetch mock news data for the focused tokens and projects\n    const projectNameSet = new Set();\n    // Add focus tokens to the set\n    focusTokens.forEach((token)=>projectNameSet.add(token));\n    // Add project names to the set\n    defiProjects.forEach((project)=>projectNameSet.add(project.name));\n    // Convert set to array\n    const projectNames = Array.from(projectNameSet);\n    // Fetch news events (using our mock implementation)\n    const newsEvents = await fetchNewsEvents(projectNames);\n    console.log(\"\\uD83D\\uDCF0 Fetched news events:\", newsEvents.length);\n    // Fetch Etherscan data if query is related to Ethereum/blockchain analysis\n    let etherscanData = null;\n    if (queryLower.includes(\"ethereum\") || queryLower.includes(\"eth\") || queryLower.includes(\"contract\") || queryLower.includes(\"transaction\") || queryLower.includes(\"gas\") || queryLower.includes(\"blockchain\") || queryLower.includes(\"address\") || queryLower.includes(\"token\")) {\n        console.log(\"\\uD83D\\uDD17 Fetching Etherscan data...\");\n        // Get gas price data\n        const gasPrice = await fetchEtherscanGasPrice();\n        // If we have specific contract addresses mentioned, fetch token info\n        let tokenInfo = null;\n        let transactions = [];\n        // Common ERC-20 token contract addresses\n        const tokenContracts = {\n            \"USDT\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n            \"USDC\": \"0xA0b86a33E6441b8C4C8C8C8C8C8C8C8C8C8C8C8C\",\n            \"UNI\": \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n            \"LINK\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n            \"AAVE\": \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\",\n            \"COMP\": \"0xc00e94Cb662C3520282E6f5717214004A7f26888\",\n            \"MKR\": \"0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2\"\n        };\n        // Check if any of our focus tokens have known contract addresses\n        for (const token of focusTokens){\n            if (tokenContracts[token]) {\n                tokenInfo = await fetchEtherscanTokenInfo(tokenContracts[token]);\n                if (tokenInfo) break;\n            }\n        }\n        // Fetch recent transactions for a sample address (in real app, this would be based on query)\n        if (queryLower.includes(\"transaction\") || queryLower.includes(\"activity\")) {\n            // Use a sample address for demonstration\n            const sampleAddress = \"0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6\"; // Example address\n            transactions = await fetchEtherscanTransactions(sampleAddress);\n        }\n        etherscanData = {\n            gasPrice,\n            tokenInfo,\n            transactions: transactions.slice(0, 5)\n        };\n        console.log(\"\\uD83D\\uDD17 Etherscan data fetched:\", {\n            hasGasPrice: !!gasPrice,\n            hasTokenInfo: !!tokenInfo,\n            transactionCount: transactions.length\n        });\n    }\n    return {\n        cryptoData,\n        defiProjects,\n        socialSentiment: [],\n        newsEvents,\n        etherscanData,\n        queryContext: {\n            timestamp,\n            timeFrame,\n            topN,\n            useTrending,\n            useRandomOrder\n        }\n    };\n}\n// Etherscan API functions\nasync function fetchEtherscanTokenInfo(contractAddress) {\n    try {\n        if (!ETHERSCAN_API_KEY || ETHERSCAN_API_KEY === \"your-etherscan-api-key\") {\n            console.log(\"⚠️ Etherscan API key not configured, skipping Etherscan data\");\n            return null;\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.etherscan.io/api\", {\n            params: {\n                module: \"token\",\n                action: \"tokeninfo\",\n                contractaddress: contractAddress,\n                apikey: ETHERSCAN_API_KEY\n            }\n        });\n        if (response.data.status === \"1\" && response.data.result) {\n            return response.data.result[0];\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Etherscan token info error:\", error);\n        return null;\n    }\n}\nasync function fetchEtherscanTokenBalance(contractAddress, walletAddress) {\n    try {\n        if (!ETHERSCAN_API_KEY || ETHERSCAN_API_KEY === \"your-etherscan-api-key\") {\n            return null;\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.etherscan.io/api\", {\n            params: {\n                module: \"account\",\n                action: \"tokenbalance\",\n                contractaddress: contractAddress,\n                address: walletAddress,\n                tag: \"latest\",\n                apikey: ETHERSCAN_API_KEY\n            }\n        });\n        if (response.data.status === \"1\") {\n            return {\n                balance: response.data.result,\n                address: walletAddress,\n                contractAddress: contractAddress\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Etherscan token balance error:\", error);\n        return null;\n    }\n}\nasync function fetchEtherscanTransactions(address, startBlock = 0, endBlock = 99999999) {\n    try {\n        if (!ETHERSCAN_API_KEY || ETHERSCAN_API_KEY === \"your-etherscan-api-key\") {\n            return [];\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.etherscan.io/api\", {\n            params: {\n                module: \"account\",\n                action: \"txlist\",\n                address: address,\n                startblock: startBlock,\n                endblock: endBlock,\n                sort: \"desc\",\n                apikey: ETHERSCAN_API_KEY\n            }\n        });\n        if (response.data.status === \"1\" && response.data.result) {\n            return response.data.result.slice(0, 10); // Limit to 10 most recent transactions\n        }\n        return [];\n    } catch (error) {\n        console.error(\"Etherscan transactions error:\", error);\n        return [];\n    }\n}\nasync function fetchEtherscanGasPrice() {\n    try {\n        if (!ETHERSCAN_API_KEY || ETHERSCAN_API_KEY === \"your-etherscan-api-key\") {\n            console.log(\"⚠️ Etherscan API key not configured\");\n            return null;\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.etherscan.io/api\", {\n            params: {\n                module: \"gastracker\",\n                action: \"gasoracle\",\n                apikey: ETHERSCAN_API_KEY\n            }\n        });\n        console.log(\"\\uD83D\\uDD17 Etherscan gas price response:\", response.data);\n        if (response.data.status === \"1\" && response.data.result) {\n            const r = response.data.result;\n            // Normalize to internal EtherscanGasPrice interface expected by UI (SafeLow, Standard, Fast, Fastest)\n            // Etherscan gasoracle now returns SafeGasPrice / ProposeGasPrice / FastGasPrice.\n            const mapped = {\n                SafeLow: r.SafeGasPrice ?? r.safeGasPrice ?? \"0\",\n                Standard: r.ProposeGasPrice ?? r.proposeGasPrice ?? r.SafeGasPrice ?? \"0\",\n                Fast: r.FastGasPrice ?? r.fastGasPrice ?? r.ProposeGasPrice ?? \"0\",\n                Fastest: (()=>{\n                    const base = Number(r.FastGasPrice || r.ProposeGasPrice || r.SafeGasPrice || \"0\");\n                    if (!isNaN(base) && base > 0) return (base * 1.15).toFixed(9); // derive\n                    return r.FastGasPrice || r.ProposeGasPrice || r.SafeGasPrice || \"0\";\n                })(),\n                suggestBaseFee: r.suggestBaseFee || r.suggestedBaseFee || \"0\",\n                LastBlock: r.LastBlock || r.lastBlock || \"0\",\n                _raw: r\n            };\n            console.log(\"✅ Mapped Etherscan gas price data:\", mapped);\n            return mapped;\n        }\n        console.log(\"❌ Etherscan gas price API error:\", response.data);\n        return null;\n    } catch (error) {\n        console.error(\"❌ Etherscan gas price error:\", error);\n        return null;\n    }\n}\nasync function fetchEtherscanContractSource(contractAddress) {\n    try {\n        if (!ETHERSCAN_API_KEY || ETHERSCAN_API_KEY === \"your-etherscan-api-key\") {\n            return null;\n        }\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.etherscan.io/api\", {\n            params: {\n                module: \"contract\",\n                action: \"getsourcecode\",\n                address: contractAddress,\n                apikey: ETHERSCAN_API_KEY\n            }\n        });\n        if (response.data.status === \"1\" && response.data.result) {\n            return response.data.result[0];\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Etherscan contract source error:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/api.ts\n");

/***/ }),

/***/ "(rsc)/./lib/langchain.ts":
/*!**************************!*\
  !*** ./lib/langchain.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationMemory: () => (/* binding */ ConversationMemory),\n/* harmony export */   analyzeWithLangChain: () => (/* binding */ analyzeWithLangChain),\n/* harmony export */   apiAnalysisChain: () => (/* binding */ apiAnalysisChain),\n/* harmony export */   dataAnalysisTool: () => (/* binding */ dataAnalysisTool),\n/* harmony export */   researchChain: () => (/* binding */ researchChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_groq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/groq */ \"(rsc)/./node_modules/@langchain/groq/index.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api */ \"(rsc)/./lib/api.ts\");\n\n\n\n\n\n\n// Initialize LangChain with Groq\nconst model = new _langchain_groq__WEBPACK_IMPORTED_MODULE_0__.ChatGroq({\n    apiKey: process.env.GROQ_API_KEY,\n    model: \"llama-3.1-8b-instant\",\n    temperature: 0.1,\n    maxTokens: 2000,\n    timeout: 30000\n});\n// Schema for API requirements analysis\nconst APIRequirementsSchema = zod__WEBPACK_IMPORTED_MODULE_5__.object({\n    needsCryptoData: zod__WEBPACK_IMPORTED_MODULE_5__.boolean().describe(\"Whether crypto market data is needed\"),\n    cryptoSymbols: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.string()).describe(\"List of cryptocurrency symbols to fetch\"),\n    needsDeFiData: zod__WEBPACK_IMPORTED_MODULE_5__.boolean().describe(\"Whether DeFi project data is needed\"),\n    needsEtherscanData: zod__WEBPACK_IMPORTED_MODULE_5__.boolean().describe(\"Whether blockchain/Etherscan data is needed\"),\n    etherscanActions: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.string()).describe(\"List of Etherscan actions needed (gas, token, transactions)\"),\n    needsDuneData: zod__WEBPACK_IMPORTED_MODULE_5__.boolean().describe(\"Whether Dune Analytics data is needed\"),\n    duneQuery: zod__WEBPACK_IMPORTED_MODULE_5__.string().optional().describe(\"Dune query to execute if needed\"),\n    analysisType: zod__WEBPACK_IMPORTED_MODULE_5__[\"enum\"]([\n        \"research\",\n        \"chat\"\n    ]).describe(\"Type of analysis to perform\"),\n    priority: zod__WEBPACK_IMPORTED_MODULE_5__[\"enum\"]([\n        \"high\",\n        \"medium\",\n        \"low\"\n    ]).describe(\"Priority level for data fetching\")\n});\n// Schema for final research result\nconst ResearchResultSchema = zod__WEBPACK_IMPORTED_MODULE_5__.object({\n    summary: zod__WEBPACK_IMPORTED_MODULE_5__.string().describe(\"Comprehensive analysis of the crypto data\"),\n    dataTable: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.object({\n        project: zod__WEBPACK_IMPORTED_MODULE_5__.string(),\n        tvl: zod__WEBPACK_IMPORTED_MODULE_5__.string(),\n        tvlChange: zod__WEBPACK_IMPORTED_MODULE_5__.string(),\n        price: zod__WEBPACK_IMPORTED_MODULE_5__.string(),\n        priceChange: zod__WEBPACK_IMPORTED_MODULE_5__.string(),\n        sentiment: zod__WEBPACK_IMPORTED_MODULE_5__.string(),\n        newsCount: zod__WEBPACK_IMPORTED_MODULE_5__.union([\n            zod__WEBPACK_IMPORTED_MODULE_5__.number(),\n            zod__WEBPACK_IMPORTED_MODULE_5__.string()\n        ])\n    })).optional(),\n    sources: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.string()),\n    insights: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.string()).describe(\"Key insights and actionable recommendations\"),\n    riskFactors: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.string()).describe(\"Potential risks and concerns\"),\n    marketTrends: zod__WEBPACK_IMPORTED_MODULE_5__.string().describe(\"Current market trends and patterns\"),\n    citations: zod__WEBPACK_IMPORTED_MODULE_5__.array(zod__WEBPACK_IMPORTED_MODULE_5__.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_5__.string().describe(\"Unique identifier for the citation\"),\n        text: zod__WEBPACK_IMPORTED_MODULE_5__.string().describe(\"The cited text or fact\"),\n        source: zod__WEBPACK_IMPORTED_MODULE_5__.string().describe(\"Source name (e.g., CoinMarketCap, DeFiLlama)\"),\n        url: zod__WEBPACK_IMPORTED_MODULE_5__.string().optional().describe(\"Optional URL to the source\")\n    })).optional().describe(\"Citations for specific facts or data points\")\n});\n// Create output parsers\nconst apiRequirementsParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_3__.StructuredOutputParser.fromZodSchema(APIRequirementsSchema);\nconst researchResultParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_3__.StructuredOutputParser.fromZodSchema(ResearchResultSchema);\n// Custom simplified format instructions to avoid model echoing entire JSON schema with fences\nfunction getResearchFormatInstructions() {\n    return `Return ONLY compact valid JSON with the following structure (no markdown, no code fences):\\n{\\n  \"summary\": string,\\n  \"dataTable\": optional array of up to 10 rows: [{\"project\": string, \"tvl\": string, \"tvlChange\": string, \"price\": string, \"priceChange\": string, \"sentiment\": string, \"newsCount\": number|string}],\\n  \"sources\": string[],\\n  \"insights\": string[],\\n  \"riskFactors\": string[],\\n  \"marketTrends\": string,\\n  \"citations\": optional array of citation objects: [{\"id\": string, \"text\": string, \"source\": string, \"url\": string}]\\n}\\nNo extra keys.`;\n}\n// Helper to extract the last JSON object from messy LLM output containing code fences / schema echoes\nfunction extractLastJsonObject(text) {\n    if (!text) return null;\n    // Remove code fences\n    const cleaned = text.replace(/```[a-zA-Z]*\\n?/g, \"\");\n    // Find all top-level JSON objects heuristically\n    const matches = [];\n    let depth = 0;\n    let start = -1;\n    for(let i = 0; i < cleaned.length; i++){\n        const ch = cleaned[i];\n        if (ch === \"{\") {\n            if (depth === 0) start = i;\n            depth++;\n        } else if (ch === \"}\") {\n            depth--;\n            if (depth === 0 && start !== -1) {\n                matches.push(cleaned.slice(start, i + 1));\n                start = -1;\n            }\n        }\n    }\n    for(let i = matches.length - 1; i >= 0; i--){\n        try {\n            return JSON.parse(matches[i]);\n        } catch  {}\n    }\n    return null;\n}\n// Prompt for analyzing what APIs are needed\nconst apiAnalysisPrompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.PromptTemplate.fromTemplate(`\r\nYou are an expert crypto analyst assistant. Analyze the user's query and determine which APIs and data sources are needed to provide a comprehensive answer.\r\n\r\nUser Query: {query}\r\n\r\nAvailable Data Sources:\r\n1. Crypto Market Data (CoinMarketCap/CoinGecko) - for price, market cap, volume data\r\n2. DeFi Projects Data (DeFiLlama) - for TVL, protocol information, rankings\r\n3. Etherscan Blockchain Data - for gas prices, token info, transactions, smart contracts\r\n4. Dune Analytics - for custom blockchain analytics and metrics\r\n\r\n{format_instructions}\r\n\r\nAnalyze the query and determine:\r\n- Which data sources are relevant\r\n- What specific data points are needed\r\n- Priority level for data fetching\r\n- Type of analysis to perform\r\n\r\nBe specific about:\r\n- Cryptocurrency symbols if market data is needed\r\n- Etherscan actions (gas, token info, transactions) if blockchain data is needed\r\n- DeFi protocols if TVL/protocol data is needed\r\n`);\n// Prompt for final analysis\nconst researchPrompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.PromptTemplate.fromTemplate(`\r\nYou are an expert crypto analyst assistant. Analyze the following data and provide comprehensive insights.\r\n\r\nSTRICT OUTPUT RULES (must follow exactly):\r\n- Output ONLY a single valid JSON object.\r\n- NO markdown, NO code fences, NO schema reproduction, NO commentary.\r\n- Use only the keys specified below. Do not invent new keys.\r\n\r\nUser Query: {query}\r\nCrypto Market Data: {cryptoData}\r\nDeFi Projects: {defiProjects}\r\nEtherscan Data: {etherscanData}\r\nDune Data: {duneData}\r\n\r\n{format_instructions}\r\n\r\nContent guidance:\r\n- summary: concise but comprehensive paragraph(s)\r\n- dataTable: only if comparative metrics are relevant; max 10 rows\r\n- insights: bullet-style actionable points (max 8)\r\n- riskFactors: distinct risks (max 8)\r\n- marketTrends: 1-3 sentences on directional context\r\n- sources: list actual data sources you used among: Crypto Market Data, DeFiLlama, Etherscan, Dune Analytics\r\n- citations: for each important fact or data point, provide a citation with:\r\n  * id: a unique identifier (e.g., \"cit1\", \"cit2\")\r\n  * text: the specific text or fact being cited\r\n  * source: which data source provided this information\r\n  * url: if available, a URL to access more information (use SOURCE_LINKS values)\r\n`);\n// Chain for analyzing API requirements\nconst apiAnalysisChain = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.RunnableSequence.from([\n    {\n        query: (input)=>input.query,\n        format_instructions: ()=>apiRequirementsParser.getFormatInstructions()\n    },\n    apiAnalysisPrompt,\n    model,\n    apiRequirementsParser\n]);\n// Chain for final research analysis\nconst researchChain = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.RunnableSequence.from([\n    {\n        query: (input)=>input.query,\n        cryptoData: (input)=>JSON.stringify(input.data.cryptoData || []),\n        defiProjects: (input)=>JSON.stringify(input.data.defiProjects || []),\n        etherscanData: (input)=>JSON.stringify(input.data.etherscanData || {}),\n        duneData: (input)=>JSON.stringify(input.data.duneData || []),\n        format_instructions: ()=>getResearchFormatInstructions()\n    },\n    researchPrompt,\n    model,\n    researchResultParser\n]);\n// Function to fetch data based on API requirements with timeout\nasync function fetchRequiredData(requirements) {\n    const data = {};\n    const timeout = 15000; // 15 second timeout for data fetching\n    try {\n        // Fetch crypto market data if needed\n        if (requirements.needsCryptoData && requirements.cryptoSymbols.length > 0) {\n            console.log(\"\\uD83D\\uDCCA Fetching crypto market data for:\", requirements.cryptoSymbols);\n            const cryptoPromise = (0,_api__WEBPACK_IMPORTED_MODULE_4__.fetchCryptoData)(requirements.cryptoSymbols);\n            data.cryptoData = await Promise.race([\n                cryptoPromise,\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Crypto data fetch timeout\")), timeout))\n            ]);\n        }\n        // Fetch DeFi data if needed\n        if (requirements.needsDeFiData) {\n            console.log(\"\\uD83C\\uDFDB️ Fetching DeFi projects data\");\n            const defiPromise = (0,_api__WEBPACK_IMPORTED_MODULE_4__.fetchDeFiProjects)();\n            data.defiProjects = await Promise.race([\n                defiPromise,\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"DeFi data fetch timeout\")), timeout))\n            ]);\n        }\n        // Fetch Etherscan data if needed\n        if (requirements.needsEtherscanData) {\n            console.log(\"\\uD83D\\uDD17 Fetching Etherscan blockchain data\");\n            data.etherscanData = {};\n            for (const action of requirements.etherscanActions){\n                try {\n                    switch(action){\n                        case \"gas\":\n                            data.etherscanData.gasPrice = await Promise.race([\n                                (0,_api__WEBPACK_IMPORTED_MODULE_4__.fetchEtherscanGasPrice)(),\n                                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Gas price fetch timeout\")), timeout))\n                            ]);\n                            break;\n                        case \"token\":\n                            // For now, we'll fetch a default token (USDT)\n                            data.etherscanData.tokenInfo = await Promise.race([\n                                (0,_api__WEBPACK_IMPORTED_MODULE_4__.fetchEtherscanTokenInfo)(\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"),\n                                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Token info fetch timeout\")), timeout))\n                            ]);\n                            break;\n                        case \"transactions\":\n                            // For now, we'll fetch recent transactions from a known address\n                            data.etherscanData.transactions = await Promise.race([\n                                (0,_api__WEBPACK_IMPORTED_MODULE_4__.fetchEtherscanTransactions)(\"0x28C6c06298d514Db089934071355E5743bf21d60\"),\n                                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Transactions fetch timeout\")), timeout))\n                            ]);\n                            break;\n                    }\n                } catch (error) {\n                    console.error(`Error fetching Etherscan ${action} data:`, error);\n                // Continue with other actions even if one fails\n                }\n            }\n        }\n        // Fetch Dune data if needed\n        if (requirements.needsDuneData && requirements.duneQuery) {\n            console.log(\"\\uD83D\\uDCC8 Fetching Dune Analytics data\");\n            try {\n                data.duneData = await Promise.race([\n                    (0,_api__WEBPACK_IMPORTED_MODULE_4__.fetchDuneData)(requirements.duneQuery),\n                    new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Dune data fetch timeout\")), timeout))\n                ]);\n            } catch (error) {\n                console.error(\"Error fetching Dune data:\", error);\n                data.duneData = [];\n            }\n        }\n    } catch (error) {\n        console.error(\"Error fetching required data:\", error);\n    }\n    return data;\n}\n// Main function to analyze query and fetch data intelligently with fallback\nasync function analyzeWithLangChain(query, mode = \"research\") {\n    try {\n        console.log(\"\\uD83E\\uDD16 Analyzing query with LangChain:\", query);\n        // Step 1: Analyze what APIs are needed with timeout\n        console.log(\"\\uD83D\\uDCCB Analyzing API requirements...\");\n        const apiRequirements = await Promise.race([\n            apiAnalysisChain.invoke({\n                query\n            }),\n            new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"API requirements analysis timeout\")), 20000))\n        ]);\n        console.log(\"\\uD83D\\uDCCB API Requirements:\", apiRequirements);\n        // Step 2: Fetch required data\n        console.log(\"\\uD83D\\uDCCA Fetching required data...\");\n        const data = await fetchRequiredData(apiRequirements);\n        console.log(\"\\uD83D\\uDCCA Fetched data structure:\", Object.keys(data));\n        // Slim data before sending to model to reduce latency / token usage\n        if (data.defiProjects) {\n            data.defiProjects = [\n                ...data.defiProjects\n            ].sort((a, b)=>(b.tvl || 0) - (a.tvl || 0)).slice(0, 20); // cap\n        }\n        if (data.cryptoData) {\n            data.cryptoData = [\n                ...data.cryptoData\n            ].sort((a, b)=>(b.marketCap || 0) - (a.marketCap || 0)).slice(0, 15);\n        }\n        // Step 3: Perform final analysis with timeout\n        console.log(\"\\uD83E\\uDDE0 Performing final analysis...\");\n        let result;\n        const MODEL_TIMEOUT_MS = 20000; // tighten from 30s to 20s\n        try {\n            result = await Promise.race([\n                researchChain.invoke({\n                    query,\n                    data\n                }),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Final analysis timeout\")), MODEL_TIMEOUT_MS))\n            ]);\n        } catch (parseError) {\n            if (parseError?.message === \"Final analysis timeout\") {\n                console.warn(\"⚠️ LangChain model timeout – generating fast local fallback\");\n                const fallbackTable = buildLocalTableFromDeFi(data.defiProjects || []);\n                const topNames = fallbackTable.slice(0, 5).map((r)=>r.project).join(\", \");\n                const summary = `Top DeFi protocols by TVL: ${topNames}. (Local fallback summary due to model timeout)`;\n                result = {\n                    summary,\n                    dataTable: fallbackTable,\n                    sources: [\n                        \"DeFiLlama\"\n                    ],\n                    insights: fallbackTable.slice(0, 3).map((r)=>`${r.project} shows ${r.tvlChange} TVL change.`),\n                    riskFactors: [\n                        \"Model timeout – AI narrative limited\",\n                        \"Data may exclude smaller protocols\"\n                    ],\n                    marketTrends: \"DeFi sector snapshot generated locally\",\n                    citations: [\n                        {\n                            id: \"cit1\",\n                            text: `Top DeFi protocols by TVL: ${topNames}`,\n                            source: \"DeFiLlama\",\n                            url: \"https://defillama.com/\"\n                        }\n                    ]\n                };\n            } else {\n                console.error(\"Parsing error, attempting structured fallback extraction\");\n                const raw = parseError?.llmOutput || parseError?.output || \"\";\n                let extracted = extractLastJsonObject(raw);\n                if (!extracted) {\n                    try {\n                        const retry = await model.invoke([\n                            [\n                                \"system\",\n                                \"Output ONLY a single valid minified JSON object meeting the specified keys. No markdown.\"\n                            ],\n                            [\n                                \"human\",\n                                `Query: ${query}\\nData: ${JSON.stringify(data)}\\nKeys: summary,dataTable,sources,insights,riskFactors,marketTrends`\n                            ]\n                        ]);\n                        extracted = extractLastJsonObject(retry.content);\n                    } catch (retryErr) {\n                        console.error(\"Retry invoke failed:\", retryErr);\n                    }\n                }\n                if (!extracted) throw parseError;\n                result = extracted;\n            }\n        }\n        // Step 4: Format the response\n        const response = {\n            summary: result.summary,\n            data: data,\n            dataTable: result.dataTable || [],\n            sources: result.sources,\n            timestamp: new Date().toISOString(),\n            showDeFi: apiRequirements.needsDeFiData,\n            showTable: !!result.dataTable,\n            showEtherscan: apiRequirements.needsEtherscanData,\n            isCryptoQuery: true,\n            insights: result.insights,\n            riskFactors: result.riskFactors,\n            marketTrends: result.marketTrends,\n            citations: result.citations || []\n        };\n        console.log(\"✅ LangChain analysis completed successfully\");\n        return response;\n    } catch (error) {\n        console.error(\"LangChain analysis error:\", error);\n        // Check if it's a rate limit error\n        if (error && typeof error === \"object\" && \"status\" in error && error.status === 429) {\n            console.log(\"\\uD83D\\uDD04 Rate limit exceeded, falling back to standard analysis...\");\n            try {\n                // Import the original analysis function\n                const { analyzeCryptoData } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/groq-sdk\"), __webpack_require__.e(\"_rsc_lib_groq_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./groq */ \"(rsc)/./lib/groq.ts\"));\n                const { fetchAllData } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./api */ \"(rsc)/./lib/api.ts\"));\n                const data = await fetchAllData(query);\n                const result = await analyzeCryptoData(query, data);\n                return {\n                    ...result,\n                    insights: [\n                        \"Analysis completed using standard method due to Groq rate limit\"\n                    ],\n                    riskFactors: [\n                        \"Consider upgrading your Groq plan for higher rate limits\"\n                    ],\n                    marketTrends: \"Data analysis completed with standard method\"\n                };\n            } catch (fallbackError) {\n                console.error(\"Fallback analysis also failed:\", fallbackError);\n            }\n        }\n        // Fallback to basic analysis\n        console.log(\"\\uD83D\\uDD04 Falling back to basic analysis...\");\n        try {\n            // Import the original analysis function\n            const { analyzeCryptoData } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/groq-sdk\"), __webpack_require__.e(\"_rsc_lib_groq_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./groq */ \"(rsc)/./lib/groq.ts\"));\n            const { fetchAllData } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./api */ \"(rsc)/./lib/api.ts\"));\n            const data = await fetchAllData(query);\n            const result = await analyzeCryptoData(query, data);\n            return {\n                ...result,\n                insights: [\n                    \"Analysis completed using fallback method due to LangChain timeout\"\n                ],\n                riskFactors: [\n                    \"Consider using standard mode for faster responses\"\n                ],\n                marketTrends: \"Data analysis completed with basic method\"\n            };\n        } catch (fallbackError) {\n            console.error(\"Fallback analysis also failed:\", fallbackError);\n            // Final fallback response\n            return {\n                summary: `Analysis completed. ${error instanceof Error ? error.message : \"Unknown error occurred\"}. Please try using the standard mode.`,\n                data: {},\n                sources: [\n                    \"Fallback Analysis\"\n                ],\n                timestamp: new Date().toISOString(),\n                showDeFi: false,\n                showTable: false,\n                showEtherscan: false,\n                isCryptoQuery: true,\n                insights: [\n                    \"LangChain integration encountered an error\"\n                ],\n                riskFactors: [\n                    \"Use standard mode for more reliable responses\"\n                ],\n                marketTrends: \"Unable to complete analysis with current setup\",\n                citations: [\n                    {\n                        id: \"cit1\",\n                        text: \"Analysis encountered an error during processing.\",\n                        source: \"System\",\n                        url: undefined\n                    }\n                ]\n            };\n        }\n    }\n}\n// Build a lightweight table from DeFi projects without model assistance\nfunction buildLocalTableFromDeFi(defiProjects) {\n    return [\n        ...defiProjects\n    ].sort((a, b)=>(b.tvl || 0) - (a.tvl || 0)).slice(0, 10).map((p)=>({\n            project: p.name,\n            tvl: p.tvl ? `$${(p.tvl / 1e9).toFixed(2)}B` : \"N/A\",\n            tvlChange: typeof p.tvlChange24h === \"number\" ? `${p.tvlChange24h >= 0 ? \"+\" : \"\"}${p.tvlChange24h.toFixed(2)}%` : \"0%\",\n            price: \"N/A\",\n            priceChange: \"N/A\",\n            sentiment: p.tvlChange24h > 2 ? \"Positive\" : p.tvlChange24h < -2 ? \"Negative\" : \"Neutral\",\n            newsCount: 0\n        }));\n}\n// Memory and conversation management\nclass ConversationMemory {\n    addMessage(role, content) {\n        this.messages.push({\n            role,\n            content,\n            timestamp: new Date()\n        });\n        // Keep only the last N messages\n        if (this.messages.length > this.maxMessages) {\n            this.messages = this.messages.slice(-this.maxMessages);\n        }\n    }\n    getConversationHistory() {\n        return this.messages.map((msg)=>`${msg.role}: ${msg.content}`).join(\"\\n\");\n    }\n    clear() {\n        this.messages = [];\n    }\n    constructor(){\n        this.messages = [];\n        this.maxMessages = 10;\n    }\n}\n// Tool for data analysis\nconst dataAnalysisTool = {\n    name: \"analyze_crypto_data\",\n    description: \"Analyze cryptocurrency and DeFi data using LangChain\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_5__.object({\n        query: zod__WEBPACK_IMPORTED_MODULE_5__.string().describe(\"The analysis query\"),\n        mode: zod__WEBPACK_IMPORTED_MODULE_5__[\"enum\"]([\n            \"research\",\n            \"chat\"\n        ]).describe(\"Analysis mode\")\n    }),\n    func: async (input)=>{\n        return await analyzeWithLangChain(input.query, input.mode);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQ3hDTixJQUFJLENBQUM7SUFDVjtJQUVBZ0MsUUFBUTtRQUNOLElBQUksQ0FBQ0osUUFBUSxHQUFHLEVBQUU7SUFDcEI7O2FBcEJRQSxXQUFvRixFQUFFO2FBQ3RGQyxjQUFjOztBQW9CeEI7QUFFQSx5QkFBeUI7QUFDbEIsTUFBTUksbUJBQW1CO0lBQzlCWCxNQUFNO0lBQ05ZLGFBQWE7SUFDYkMsUUFBUTlKLHVDQUFRLENBQUM7UUFDZjJFLE9BQU8zRSx1Q0FBUSxHQUFHbUIsUUFBUSxDQUFDO1FBQzNCcUYsTUFBTXhHLHdDQUFNLENBQUM7WUFBQztZQUFZO1NBQU8sRUFBRW1CLFFBQVEsQ0FBQztJQUM5QztJQUNBNEksTUFBTSxPQUFPbkY7UUFDWCxPQUFPLE1BQU0yQixxQkFBcUIzQixNQUFNRCxLQUFLLEVBQUVDLE1BQU00QixJQUFJO0lBQzNEO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyeXB0by1yZXNlYXJjaC1hc3Npc3RhbnQvLi9saWIvbGFuZ2NoYWluLnRzPzE1ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdEdyb3EgfSBmcm9tICdAbGFuZ2NoYWluL2dyb3EnO1xyXG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gJ0BsYW5nY2hhaW4vY29yZS9wcm9tcHRzJztcclxuaW1wb3J0IHsgUnVubmFibGVTZXF1ZW5jZSB9IGZyb20gJ0BsYW5nY2hhaW4vY29yZS9ydW5uYWJsZXMnO1xyXG5pbXBvcnQgeyBTdHJpbmdPdXRwdXRQYXJzZXIgfSBmcm9tICdAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnMnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIH0gZnJvbSAnQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzJztcclxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XHJcbmltcG9ydCB7IFJlc2VhcmNoUmVzdWx0LCBEYXRhVGFibGVSb3cgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgXHJcbiAgZmV0Y2hDcnlwdG9EYXRhLCBcclxuICBmZXRjaERlRmlQcm9qZWN0cywgXHJcbiAgZmV0Y2hEdW5lRGF0YSwgXHJcbiAgZmV0Y2hFdGhlcnNjYW5HYXNQcmljZSxcclxuICBmZXRjaEV0aGVyc2NhblRva2VuSW5mbyxcclxuICBmZXRjaEV0aGVyc2NhblRyYW5zYWN0aW9uc1xyXG59IGZyb20gJy4vYXBpJztcclxuXHJcbi8vIEluaXRpYWxpemUgTGFuZ0NoYWluIHdpdGggR3JvcVxyXG5jb25zdCBtb2RlbCA9IG5ldyBDaGF0R3JvcSh7XHJcbiAgYXBpS2V5OiBwcm9jZXNzLmVudi5HUk9RX0FQSV9LRVksXHJcbiAgbW9kZWw6ICdsbGFtYS0zLjEtOGItaW5zdGFudCcsIC8vIFVzaW5nIHNtYWxsZXIgbW9kZWwgdG8gYXZvaWQgcmF0ZSBsaW1pdHNcclxuICB0ZW1wZXJhdHVyZTogMC4xLFxyXG4gIG1heFRva2VuczogMjAwMCwgLy8gUmVkdWNlZCB0b2tlbiBsaW1pdFxyXG4gIHRpbWVvdXQ6IDMwMDAwLCAvLyAzMCBzZWNvbmQgdGltZW91dFxyXG59KTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgQVBJIHJlcXVpcmVtZW50cyBhbmFseXNpc1xyXG5jb25zdCBBUElSZXF1aXJlbWVudHNTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgbmVlZHNDcnlwdG9EYXRhOiB6LmJvb2xlYW4oKS5kZXNjcmliZShcIldoZXRoZXIgY3J5cHRvIG1hcmtldCBkYXRhIGlzIG5lZWRlZFwiKSxcclxuICBjcnlwdG9TeW1ib2xzOiB6LmFycmF5KHouc3RyaW5nKCkpLmRlc2NyaWJlKFwiTGlzdCBvZiBjcnlwdG9jdXJyZW5jeSBzeW1ib2xzIHRvIGZldGNoXCIpLFxyXG4gIG5lZWRzRGVGaURhdGE6IHouYm9vbGVhbigpLmRlc2NyaWJlKFwiV2hldGhlciBEZUZpIHByb2plY3QgZGF0YSBpcyBuZWVkZWRcIiksXHJcbiAgbmVlZHNFdGhlcnNjYW5EYXRhOiB6LmJvb2xlYW4oKS5kZXNjcmliZShcIldoZXRoZXIgYmxvY2tjaGFpbi9FdGhlcnNjYW4gZGF0YSBpcyBuZWVkZWRcIiksXHJcbiAgZXRoZXJzY2FuQWN0aW9uczogei5hcnJheSh6LnN0cmluZygpKS5kZXNjcmliZShcIkxpc3Qgb2YgRXRoZXJzY2FuIGFjdGlvbnMgbmVlZGVkIChnYXMsIHRva2VuLCB0cmFuc2FjdGlvbnMpXCIpLFxyXG4gIG5lZWRzRHVuZURhdGE6IHouYm9vbGVhbigpLmRlc2NyaWJlKFwiV2hldGhlciBEdW5lIEFuYWx5dGljcyBkYXRhIGlzIG5lZWRlZFwiKSxcclxuICBkdW5lUXVlcnk6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZShcIkR1bmUgcXVlcnkgdG8gZXhlY3V0ZSBpZiBuZWVkZWRcIiksXHJcbiAgYW5hbHlzaXNUeXBlOiB6LmVudW0oWydyZXNlYXJjaCcsICdjaGF0J10pLmRlc2NyaWJlKFwiVHlwZSBvZiBhbmFseXNpcyB0byBwZXJmb3JtXCIpLFxyXG4gIHByaW9yaXR5OiB6LmVudW0oWydoaWdoJywgJ21lZGl1bScsICdsb3cnXSkuZGVzY3JpYmUoXCJQcmlvcml0eSBsZXZlbCBmb3IgZGF0YSBmZXRjaGluZ1wiKVxyXG59KTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgZmluYWwgcmVzZWFyY2ggcmVzdWx0XHJcbmNvbnN0IFJlc2VhcmNoUmVzdWx0U2NoZW1hID0gei5vYmplY3Qoe1xyXG4gIHN1bW1hcnk6IHouc3RyaW5nKCkuZGVzY3JpYmUoXCJDb21wcmVoZW5zaXZlIGFuYWx5c2lzIG9mIHRoZSBjcnlwdG8gZGF0YVwiKSxcclxuICBkYXRhVGFibGU6IHouYXJyYXkoei5vYmplY3Qoe1xyXG4gICAgcHJvamVjdDogei5zdHJpbmcoKSxcclxuICAgIHR2bDogei5zdHJpbmcoKSxcclxuICAgIHR2bENoYW5nZTogei5zdHJpbmcoKSxcclxuICAgIHByaWNlOiB6LnN0cmluZygpLFxyXG4gICAgcHJpY2VDaGFuZ2U6IHouc3RyaW5nKCksXHJcbiAgICBzZW50aW1lbnQ6IHouc3RyaW5nKCksXHJcbiAgICBuZXdzQ291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHouc3RyaW5nKCldKVxyXG4gIH0pKS5vcHRpb25hbCgpLFxyXG4gIHNvdXJjZXM6IHouYXJyYXkoei5zdHJpbmcoKSksXHJcbiAgaW5zaWdodHM6IHouYXJyYXkoei5zdHJpbmcoKSkuZGVzY3JpYmUoXCJLZXkgaW5zaWdodHMgYW5kIGFjdGlvbmFibGUgcmVjb21tZW5kYXRpb25zXCIpLFxyXG4gIHJpc2tGYWN0b3JzOiB6LmFycmF5KHouc3RyaW5nKCkpLmRlc2NyaWJlKFwiUG90ZW50aWFsIHJpc2tzIGFuZCBjb25jZXJuc1wiKSxcclxuICBtYXJrZXRUcmVuZHM6IHouc3RyaW5nKCkuZGVzY3JpYmUoXCJDdXJyZW50IG1hcmtldCB0cmVuZHMgYW5kIHBhdHRlcm5zXCIpLFxyXG4gIGNpdGF0aW9uczogei5hcnJheSh6Lm9iamVjdCh7XHJcbiAgICBpZDogei5zdHJpbmcoKS5kZXNjcmliZShcIlVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY2l0YXRpb25cIiksXHJcbiAgICB0ZXh0OiB6LnN0cmluZygpLmRlc2NyaWJlKFwiVGhlIGNpdGVkIHRleHQgb3IgZmFjdFwiKSxcclxuICAgIHNvdXJjZTogei5zdHJpbmcoKS5kZXNjcmliZShcIlNvdXJjZSBuYW1lIChlLmcuLCBDb2luTWFya2V0Q2FwLCBEZUZpTGxhbWEpXCIpLFxyXG4gICAgdXJsOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJPcHRpb25hbCBVUkwgdG8gdGhlIHNvdXJjZVwiKVxyXG4gIH0pKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwiQ2l0YXRpb25zIGZvciBzcGVjaWZpYyBmYWN0cyBvciBkYXRhIHBvaW50c1wiKVxyXG59KTtcclxuXHJcbi8vIENyZWF0ZSBvdXRwdXQgcGFyc2Vyc1xyXG5jb25zdCBhcGlSZXF1aXJlbWVudHNQYXJzZXIgPSBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyLmZyb21ab2RTY2hlbWEoQVBJUmVxdWlyZW1lbnRzU2NoZW1hKTtcclxuY29uc3QgcmVzZWFyY2hSZXN1bHRQYXJzZXIgPSBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyLmZyb21ab2RTY2hlbWEoUmVzZWFyY2hSZXN1bHRTY2hlbWEpO1xyXG5cclxuLy8gQ3VzdG9tIHNpbXBsaWZpZWQgZm9ybWF0IGluc3RydWN0aW9ucyB0byBhdm9pZCBtb2RlbCBlY2hvaW5nIGVudGlyZSBKU09OIHNjaGVtYSB3aXRoIGZlbmNlc1xyXG5mdW5jdGlvbiBnZXRSZXNlYXJjaEZvcm1hdEluc3RydWN0aW9ucygpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgUmV0dXJuIE9OTFkgY29tcGFjdCB2YWxpZCBKU09OIHdpdGggdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmUgKG5vIG1hcmtkb3duLCBubyBjb2RlIGZlbmNlcyk6XFxue1xcbiAgXCJzdW1tYXJ5XCI6IHN0cmluZyxcXG4gIFwiZGF0YVRhYmxlXCI6IG9wdGlvbmFsIGFycmF5IG9mIHVwIHRvIDEwIHJvd3M6IFt7XCJwcm9qZWN0XCI6IHN0cmluZywgXCJ0dmxcIjogc3RyaW5nLCBcInR2bENoYW5nZVwiOiBzdHJpbmcsIFwicHJpY2VcIjogc3RyaW5nLCBcInByaWNlQ2hhbmdlXCI6IHN0cmluZywgXCJzZW50aW1lbnRcIjogc3RyaW5nLCBcIm5ld3NDb3VudFwiOiBudW1iZXJ8c3RyaW5nfV0sXFxuICBcInNvdXJjZXNcIjogc3RyaW5nW10sXFxuICBcImluc2lnaHRzXCI6IHN0cmluZ1tdLFxcbiAgXCJyaXNrRmFjdG9yc1wiOiBzdHJpbmdbXSxcXG4gIFwibWFya2V0VHJlbmRzXCI6IHN0cmluZyxcXG4gIFwiY2l0YXRpb25zXCI6IG9wdGlvbmFsIGFycmF5IG9mIGNpdGF0aW9uIG9iamVjdHM6IFt7XCJpZFwiOiBzdHJpbmcsIFwidGV4dFwiOiBzdHJpbmcsIFwic291cmNlXCI6IHN0cmluZywgXCJ1cmxcIjogc3RyaW5nfV1cXG59XFxuTm8gZXh0cmEga2V5cy5gO1xyXG59XHJcblxyXG4vLyBIZWxwZXIgdG8gZXh0cmFjdCB0aGUgbGFzdCBKU09OIG9iamVjdCBmcm9tIG1lc3N5IExMTSBvdXRwdXQgY29udGFpbmluZyBjb2RlIGZlbmNlcyAvIHNjaGVtYSBlY2hvZXNcclxuZnVuY3Rpb24gZXh0cmFjdExhc3RKc29uT2JqZWN0KHRleHQ6IHN0cmluZyk6IGFueSB8IG51bGwge1xyXG4gIGlmICghdGV4dCkgcmV0dXJuIG51bGw7XHJcbiAgLy8gUmVtb3ZlIGNvZGUgZmVuY2VzXHJcbiAgY29uc3QgY2xlYW5lZCA9IHRleHQucmVwbGFjZSgvYGBgW2EtekEtWl0qXFxuPy9nLCAnJyk7XHJcbiAgLy8gRmluZCBhbGwgdG9wLWxldmVsIEpTT04gb2JqZWN0cyBoZXVyaXN0aWNhbGx5XHJcbiAgY29uc3QgbWF0Y2hlczogc3RyaW5nW10gPSBbXTtcclxuICBsZXQgZGVwdGggPSAwO1xyXG4gIGxldCBzdGFydCA9IC0xO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2xlYW5lZC5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY2ggPSBjbGVhbmVkW2ldO1xyXG4gICAgaWYgKGNoID09PSAneycpIHtcclxuICAgICAgaWYgKGRlcHRoID09PSAwKSBzdGFydCA9IGk7XHJcbiAgICAgIGRlcHRoKys7XHJcbiAgICB9IGVsc2UgaWYgKGNoID09PSAnfScpIHtcclxuICAgICAgZGVwdGgtLTtcclxuICAgICAgaWYgKGRlcHRoID09PSAwICYmIHN0YXJ0ICE9PSAtMSkge1xyXG4gICAgICAgIG1hdGNoZXMucHVzaChjbGVhbmVkLnNsaWNlKHN0YXJ0LCBpICsgMSkpO1xyXG4gICAgICAgIHN0YXJ0ID0gLTE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IG1hdGNoZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKG1hdGNoZXNbaV0pO1xyXG4gICAgfSBjYXRjaCB7LyogaWdub3JlICovfVxyXG4gIH1cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLy8gUHJvbXB0IGZvciBhbmFseXppbmcgd2hhdCBBUElzIGFyZSBuZWVkZWRcclxuY29uc3QgYXBpQW5hbHlzaXNQcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoYFxyXG5Zb3UgYXJlIGFuIGV4cGVydCBjcnlwdG8gYW5hbHlzdCBhc3Npc3RhbnQuIEFuYWx5emUgdGhlIHVzZXIncyBxdWVyeSBhbmQgZGV0ZXJtaW5lIHdoaWNoIEFQSXMgYW5kIGRhdGEgc291cmNlcyBhcmUgbmVlZGVkIHRvIHByb3ZpZGUgYSBjb21wcmVoZW5zaXZlIGFuc3dlci5cclxuXHJcblVzZXIgUXVlcnk6IHtxdWVyeX1cclxuXHJcbkF2YWlsYWJsZSBEYXRhIFNvdXJjZXM6XHJcbjEuIENyeXB0byBNYXJrZXQgRGF0YSAoQ29pbk1hcmtldENhcC9Db2luR2Vja28pIC0gZm9yIHByaWNlLCBtYXJrZXQgY2FwLCB2b2x1bWUgZGF0YVxyXG4yLiBEZUZpIFByb2plY3RzIERhdGEgKERlRmlMbGFtYSkgLSBmb3IgVFZMLCBwcm90b2NvbCBpbmZvcm1hdGlvbiwgcmFua2luZ3NcclxuMy4gRXRoZXJzY2FuIEJsb2NrY2hhaW4gRGF0YSAtIGZvciBnYXMgcHJpY2VzLCB0b2tlbiBpbmZvLCB0cmFuc2FjdGlvbnMsIHNtYXJ0IGNvbnRyYWN0c1xyXG40LiBEdW5lIEFuYWx5dGljcyAtIGZvciBjdXN0b20gYmxvY2tjaGFpbiBhbmFseXRpY3MgYW5kIG1ldHJpY3NcclxuXHJcbntmb3JtYXRfaW5zdHJ1Y3Rpb25zfVxyXG5cclxuQW5hbHl6ZSB0aGUgcXVlcnkgYW5kIGRldGVybWluZTpcclxuLSBXaGljaCBkYXRhIHNvdXJjZXMgYXJlIHJlbGV2YW50XHJcbi0gV2hhdCBzcGVjaWZpYyBkYXRhIHBvaW50cyBhcmUgbmVlZGVkXHJcbi0gUHJpb3JpdHkgbGV2ZWwgZm9yIGRhdGEgZmV0Y2hpbmdcclxuLSBUeXBlIG9mIGFuYWx5c2lzIHRvIHBlcmZvcm1cclxuXHJcbkJlIHNwZWNpZmljIGFib3V0OlxyXG4tIENyeXB0b2N1cnJlbmN5IHN5bWJvbHMgaWYgbWFya2V0IGRhdGEgaXMgbmVlZGVkXHJcbi0gRXRoZXJzY2FuIGFjdGlvbnMgKGdhcywgdG9rZW4gaW5mbywgdHJhbnNhY3Rpb25zKSBpZiBibG9ja2NoYWluIGRhdGEgaXMgbmVlZGVkXHJcbi0gRGVGaSBwcm90b2NvbHMgaWYgVFZML3Byb3RvY29sIGRhdGEgaXMgbmVlZGVkXHJcbmApO1xyXG5cclxuLy8gUHJvbXB0IGZvciBmaW5hbCBhbmFseXNpc1xyXG5jb25zdCByZXNlYXJjaFByb21wdCA9IFByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShgXHJcbllvdSBhcmUgYW4gZXhwZXJ0IGNyeXB0byBhbmFseXN0IGFzc2lzdGFudC4gQW5hbHl6ZSB0aGUgZm9sbG93aW5nIGRhdGEgYW5kIHByb3ZpZGUgY29tcHJlaGVuc2l2ZSBpbnNpZ2h0cy5cclxuXHJcblNUUklDVCBPVVRQVVQgUlVMRVMgKG11c3QgZm9sbG93IGV4YWN0bHkpOlxyXG4tIE91dHB1dCBPTkxZIGEgc2luZ2xlIHZhbGlkIEpTT04gb2JqZWN0LlxyXG4tIE5PIG1hcmtkb3duLCBOTyBjb2RlIGZlbmNlcywgTk8gc2NoZW1hIHJlcHJvZHVjdGlvbiwgTk8gY29tbWVudGFyeS5cclxuLSBVc2Ugb25seSB0aGUga2V5cyBzcGVjaWZpZWQgYmVsb3cuIERvIG5vdCBpbnZlbnQgbmV3IGtleXMuXHJcblxyXG5Vc2VyIFF1ZXJ5OiB7cXVlcnl9XHJcbkNyeXB0byBNYXJrZXQgRGF0YToge2NyeXB0b0RhdGF9XHJcbkRlRmkgUHJvamVjdHM6IHtkZWZpUHJvamVjdHN9XHJcbkV0aGVyc2NhbiBEYXRhOiB7ZXRoZXJzY2FuRGF0YX1cclxuRHVuZSBEYXRhOiB7ZHVuZURhdGF9XHJcblxyXG57Zm9ybWF0X2luc3RydWN0aW9uc31cclxuXHJcbkNvbnRlbnQgZ3VpZGFuY2U6XHJcbi0gc3VtbWFyeTogY29uY2lzZSBidXQgY29tcHJlaGVuc2l2ZSBwYXJhZ3JhcGgocylcclxuLSBkYXRhVGFibGU6IG9ubHkgaWYgY29tcGFyYXRpdmUgbWV0cmljcyBhcmUgcmVsZXZhbnQ7IG1heCAxMCByb3dzXHJcbi0gaW5zaWdodHM6IGJ1bGxldC1zdHlsZSBhY3Rpb25hYmxlIHBvaW50cyAobWF4IDgpXHJcbi0gcmlza0ZhY3RvcnM6IGRpc3RpbmN0IHJpc2tzIChtYXggOClcclxuLSBtYXJrZXRUcmVuZHM6IDEtMyBzZW50ZW5jZXMgb24gZGlyZWN0aW9uYWwgY29udGV4dFxyXG4tIHNvdXJjZXM6IGxpc3QgYWN0dWFsIGRhdGEgc291cmNlcyB5b3UgdXNlZCBhbW9uZzogQ3J5cHRvIE1hcmtldCBEYXRhLCBEZUZpTGxhbWEsIEV0aGVyc2NhbiwgRHVuZSBBbmFseXRpY3NcclxuLSBjaXRhdGlvbnM6IGZvciBlYWNoIGltcG9ydGFudCBmYWN0IG9yIGRhdGEgcG9pbnQsIHByb3ZpZGUgYSBjaXRhdGlvbiB3aXRoOlxyXG4gICogaWQ6IGEgdW5pcXVlIGlkZW50aWZpZXIgKGUuZy4sIFwiY2l0MVwiLCBcImNpdDJcIilcclxuICAqIHRleHQ6IHRoZSBzcGVjaWZpYyB0ZXh0IG9yIGZhY3QgYmVpbmcgY2l0ZWRcclxuICAqIHNvdXJjZTogd2hpY2ggZGF0YSBzb3VyY2UgcHJvdmlkZWQgdGhpcyBpbmZvcm1hdGlvblxyXG4gICogdXJsOiBpZiBhdmFpbGFibGUsIGEgVVJMIHRvIGFjY2VzcyBtb3JlIGluZm9ybWF0aW9uICh1c2UgU09VUkNFX0xJTktTIHZhbHVlcylcclxuYCk7XHJcblxyXG4vLyBDaGFpbiBmb3IgYW5hbHl6aW5nIEFQSSByZXF1aXJlbWVudHNcclxuZXhwb3J0IGNvbnN0IGFwaUFuYWx5c2lzQ2hhaW4gPSBSdW5uYWJsZVNlcXVlbmNlLmZyb20oW1xyXG4gIHtcclxuICAgIHF1ZXJ5OiAoaW5wdXQ6IGFueSkgPT4gaW5wdXQucXVlcnksXHJcbiAgICBmb3JtYXRfaW5zdHJ1Y3Rpb25zOiAoKSA9PiBhcGlSZXF1aXJlbWVudHNQYXJzZXIuZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCksXHJcbiAgfSxcclxuICBhcGlBbmFseXNpc1Byb21wdCxcclxuICBtb2RlbCxcclxuICBhcGlSZXF1aXJlbWVudHNQYXJzZXIsXHJcbl0pO1xyXG5cclxuLy8gQ2hhaW4gZm9yIGZpbmFsIHJlc2VhcmNoIGFuYWx5c2lzXHJcbmV4cG9ydCBjb25zdCByZXNlYXJjaENoYWluID0gUnVubmFibGVTZXF1ZW5jZS5mcm9tKFtcclxuICB7XHJcbiAgICBxdWVyeTogKGlucHV0OiBhbnkpID0+IGlucHV0LnF1ZXJ5LFxyXG4gICAgY3J5cHRvRGF0YTogKGlucHV0OiBhbnkpID0+IEpTT04uc3RyaW5naWZ5KGlucHV0LmRhdGEuY3J5cHRvRGF0YSB8fCBbXSksXHJcbiAgICBkZWZpUHJvamVjdHM6IChpbnB1dDogYW55KSA9PiBKU09OLnN0cmluZ2lmeShpbnB1dC5kYXRhLmRlZmlQcm9qZWN0cyB8fCBbXSksXHJcbiAgICBldGhlcnNjYW5EYXRhOiAoaW5wdXQ6IGFueSkgPT4gSlNPTi5zdHJpbmdpZnkoaW5wdXQuZGF0YS5ldGhlcnNjYW5EYXRhIHx8IHt9KSxcclxuICAgIGR1bmVEYXRhOiAoaW5wdXQ6IGFueSkgPT4gSlNPTi5zdHJpbmdpZnkoaW5wdXQuZGF0YS5kdW5lRGF0YSB8fCBbXSksXHJcbiAgICBmb3JtYXRfaW5zdHJ1Y3Rpb25zOiAoKSA9PiBnZXRSZXNlYXJjaEZvcm1hdEluc3RydWN0aW9ucygpLFxyXG4gIH0sXHJcbiAgcmVzZWFyY2hQcm9tcHQsXHJcbiAgbW9kZWwsXHJcbiAgcmVzZWFyY2hSZXN1bHRQYXJzZXIsXHJcbl0pO1xyXG5cclxuLy8gRnVuY3Rpb24gdG8gZmV0Y2ggZGF0YSBiYXNlZCBvbiBBUEkgcmVxdWlyZW1lbnRzIHdpdGggdGltZW91dFxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaFJlcXVpcmVkRGF0YShyZXF1aXJlbWVudHM6IGFueSkge1xyXG4gIGNvbnN0IGRhdGE6IGFueSA9IHt9O1xyXG4gIGNvbnN0IHRpbWVvdXQgPSAxNTAwMDsgLy8gMTUgc2Vjb25kIHRpbWVvdXQgZm9yIGRhdGEgZmV0Y2hpbmdcclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIEZldGNoIGNyeXB0byBtYXJrZXQgZGF0YSBpZiBuZWVkZWRcclxuICAgIGlmIChyZXF1aXJlbWVudHMubmVlZHNDcnlwdG9EYXRhICYmIHJlcXVpcmVtZW50cy5jcnlwdG9TeW1ib2xzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc29sZS5sb2coJ/Cfk4ogRmV0Y2hpbmcgY3J5cHRvIG1hcmtldCBkYXRhIGZvcjonLCByZXF1aXJlbWVudHMuY3J5cHRvU3ltYm9scyk7XHJcbiAgICAgIGNvbnN0IGNyeXB0b1Byb21pc2UgPSBmZXRjaENyeXB0b0RhdGEocmVxdWlyZW1lbnRzLmNyeXB0b1N5bWJvbHMpO1xyXG4gICAgICBkYXRhLmNyeXB0b0RhdGEgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgIGNyeXB0b1Byb21pc2UsXHJcbiAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0NyeXB0byBkYXRhIGZldGNoIHRpbWVvdXQnKSksIHRpbWVvdXQpXHJcbiAgICAgICAgKVxyXG4gICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGZXRjaCBEZUZpIGRhdGEgaWYgbmVlZGVkXHJcbiAgICBpZiAocmVxdWlyZW1lbnRzLm5lZWRzRGVGaURhdGEpIHtcclxuICAgICAgY29uc29sZS5sb2coJ/Cfj5vvuI8gRmV0Y2hpbmcgRGVGaSBwcm9qZWN0cyBkYXRhJyk7XHJcbiAgICAgIGNvbnN0IGRlZmlQcm9taXNlID0gZmV0Y2hEZUZpUHJvamVjdHMoKTtcclxuICAgICAgZGF0YS5kZWZpUHJvamVjdHMgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgIGRlZmlQcm9taXNlLFxyXG4gICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdEZUZpIGRhdGEgZmV0Y2ggdGltZW91dCcpKSwgdGltZW91dClcclxuICAgICAgICApXHJcbiAgICAgIF0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZldGNoIEV0aGVyc2NhbiBkYXRhIGlmIG5lZWRlZFxyXG4gICAgaWYgKHJlcXVpcmVtZW50cy5uZWVkc0V0aGVyc2NhbkRhdGEpIHtcclxuICAgICAgY29uc29sZS5sb2coJ/CflJcgRmV0Y2hpbmcgRXRoZXJzY2FuIGJsb2NrY2hhaW4gZGF0YScpO1xyXG4gICAgICBkYXRhLmV0aGVyc2NhbkRhdGEgPSB7fTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIHJlcXVpcmVtZW50cy5ldGhlcnNjYW5BY3Rpb25zKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2dhcyc6XHJcbiAgICAgICAgICAgICAgZGF0YS5ldGhlcnNjYW5EYXRhLmdhc1ByaWNlID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgICAgIGZldGNoRXRoZXJzY2FuR2FzUHJpY2UoKSxcclxuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxyXG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0dhcyBwcmljZSBmZXRjaCB0aW1lb3V0JykpLCB0aW1lb3V0KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd0b2tlbic6XHJcbiAgICAgICAgICAgICAgLy8gRm9yIG5vdywgd2UnbGwgZmV0Y2ggYSBkZWZhdWx0IHRva2VuIChVU0RUKVxyXG4gICAgICAgICAgICAgIGRhdGEuZXRoZXJzY2FuRGF0YS50b2tlbkluZm8gPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgICAgICAgICAgZmV0Y2hFdGhlcnNjYW5Ub2tlbkluZm8oJzB4ZEFDMTdGOTU4RDJlZTUyM2EyMjA2MjA2OTk0NTk3QzEzRDgzMWVjNycpLFxyXG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gXHJcbiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignVG9rZW4gaW5mbyBmZXRjaCB0aW1lb3V0JykpLCB0aW1lb3V0KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd0cmFuc2FjdGlvbnMnOlxyXG4gICAgICAgICAgICAgIC8vIEZvciBub3csIHdlJ2xsIGZldGNoIHJlY2VudCB0cmFuc2FjdGlvbnMgZnJvbSBhIGtub3duIGFkZHJlc3NcclxuICAgICAgICAgICAgICBkYXRhLmV0aGVyc2NhbkRhdGEudHJhbnNhY3Rpb25zID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgICAgIGZldGNoRXRoZXJzY2FuVHJhbnNhY3Rpb25zKCcweDI4QzZjMDYyOThkNTE0RGIwODk5MzQwNzEzNTVFNTc0M2JmMjFkNjAnKSxcclxuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxyXG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoJ1RyYW5zYWN0aW9ucyBmZXRjaCB0aW1lb3V0JykpLCB0aW1lb3V0KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmZXRjaGluZyBFdGhlcnNjYW4gJHthY3Rpb259IGRhdGE6YCwgZXJyb3IpO1xyXG4gICAgICAgICAgLy8gQ29udGludWUgd2l0aCBvdGhlciBhY3Rpb25zIGV2ZW4gaWYgb25lIGZhaWxzXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmV0Y2ggRHVuZSBkYXRhIGlmIG5lZWRlZFxyXG4gICAgaWYgKHJlcXVpcmVtZW50cy5uZWVkc0R1bmVEYXRhICYmIHJlcXVpcmVtZW50cy5kdW5lUXVlcnkpIHtcclxuICAgICAgY29uc29sZS5sb2coJ/Cfk4ggRmV0Y2hpbmcgRHVuZSBBbmFseXRpY3MgZGF0YScpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGRhdGEuZHVuZURhdGEgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgICAgZmV0Y2hEdW5lRGF0YShyZXF1aXJlbWVudHMuZHVuZVF1ZXJ5KSxcclxuICAgICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0R1bmUgZGF0YSBmZXRjaCB0aW1lb3V0JykpLCB0aW1lb3V0KVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIF0pO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIER1bmUgZGF0YTonLCBlcnJvcik7XHJcbiAgICAgICAgZGF0YS5kdW5lRGF0YSA9IFtdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyByZXF1aXJlZCBkYXRhOicsIGVycm9yKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vLyBNYWluIGZ1bmN0aW9uIHRvIGFuYWx5emUgcXVlcnkgYW5kIGZldGNoIGRhdGEgaW50ZWxsaWdlbnRseSB3aXRoIGZhbGxiYWNrXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhbmFseXplV2l0aExhbmdDaGFpbihcclxuICBxdWVyeTogc3RyaW5nLFxyXG4gIG1vZGU6ICdyZXNlYXJjaCcgfCAnY2hhdCcgPSAncmVzZWFyY2gnXHJcbik6IFByb21pc2U8UmVzZWFyY2hSZXN1bHQ+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ/CfpJYgQW5hbHl6aW5nIHF1ZXJ5IHdpdGggTGFuZ0NoYWluOicsIHF1ZXJ5KTtcclxuXHJcbiAgICAvLyBTdGVwIDE6IEFuYWx5emUgd2hhdCBBUElzIGFyZSBuZWVkZWQgd2l0aCB0aW1lb3V0XHJcbiAgICBjb25zb2xlLmxvZygn8J+TiyBBbmFseXppbmcgQVBJIHJlcXVpcmVtZW50cy4uLicpO1xyXG4gICAgY29uc3QgYXBpUmVxdWlyZW1lbnRzID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgYXBpQW5hbHlzaXNDaGFpbi5pbnZva2UoeyBxdWVyeSB9KSxcclxuICAgICAgbmV3IFByb21pc2U8bmV2ZXI+KChfLCByZWplY3QpID0+IFxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignQVBJIHJlcXVpcmVtZW50cyBhbmFseXNpcyB0aW1lb3V0JykpLCAyMDAwMClcclxuICAgICAgKVxyXG4gICAgXSkgYXMgYW55O1xyXG4gICAgY29uc29sZS5sb2coJ/Cfk4sgQVBJIFJlcXVpcmVtZW50czonLCBhcGlSZXF1aXJlbWVudHMpO1xyXG5cclxuICAgIC8vIFN0ZXAgMjogRmV0Y2ggcmVxdWlyZWQgZGF0YVxyXG4gICAgY29uc29sZS5sb2coJ/Cfk4ogRmV0Y2hpbmcgcmVxdWlyZWQgZGF0YS4uLicpO1xyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoUmVxdWlyZWREYXRhKGFwaVJlcXVpcmVtZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygn8J+TiiBGZXRjaGVkIGRhdGEgc3RydWN0dXJlOicsIE9iamVjdC5rZXlzKGRhdGEpKTtcclxuXHJcbiAgICAvLyBTbGltIGRhdGEgYmVmb3JlIHNlbmRpbmcgdG8gbW9kZWwgdG8gcmVkdWNlIGxhdGVuY3kgLyB0b2tlbiB1c2FnZVxyXG4gICAgaWYgKGRhdGEuZGVmaVByb2plY3RzKSB7XHJcbiAgICAgIGRhdGEuZGVmaVByb2plY3RzID0gWy4uLmRhdGEuZGVmaVByb2plY3RzXVxyXG4gICAgICAgIC5zb3J0KChhOiBhbnksYjogYW55KT0+IChiLnR2bHx8MCkgLSAoYS50dmx8fDApKVxyXG4gICAgICAgIC5zbGljZSgwLCAyMCk7IC8vIGNhcFxyXG4gICAgfVxyXG4gICAgaWYgKGRhdGEuY3J5cHRvRGF0YSkge1xyXG4gICAgICBkYXRhLmNyeXB0b0RhdGEgPSBbLi4uZGF0YS5jcnlwdG9EYXRhXVxyXG4gICAgICAgIC5zb3J0KChhOiBhbnksYjogYW55KT0+IChiLm1hcmtldENhcHx8MCkgLSAoYS5tYXJrZXRDYXB8fDApKVxyXG4gICAgICAgIC5zbGljZSgwLCAxNSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RlcCAzOiBQZXJmb3JtIGZpbmFsIGFuYWx5c2lzIHdpdGggdGltZW91dFxyXG4gICAgY29uc29sZS5sb2coJ/Cfp6AgUGVyZm9ybWluZyBmaW5hbCBhbmFseXNpcy4uLicpO1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIGNvbnN0IE1PREVMX1RJTUVPVVRfTVMgPSAyMDAwMDsgLy8gdGlnaHRlbiBmcm9tIDMwcyB0byAyMHNcclxuICAgIHRyeSB7XHJcbiAgICAgIHJlc3VsdCA9IGF3YWl0IFByb21pc2UucmFjZShbXHJcbiAgICAgICAgcmVzZWFyY2hDaGFpbi5pbnZva2UoeyBxdWVyeSwgZGF0YSB9KSxcclxuICAgICAgICBuZXcgUHJvbWlzZTxuZXZlcj4oKF8sIHJlamVjdCkgPT4gc2V0VGltZW91dCgoKT0+cmVqZWN0KG5ldyBFcnJvcignRmluYWwgYW5hbHlzaXMgdGltZW91dCcpKSwgTU9ERUxfVElNRU9VVF9NUykpXHJcbiAgICAgIF0pIGFzIGFueTtcclxuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3I6IGFueSkge1xyXG4gICAgICBpZiAocGFyc2VFcnJvcj8ubWVzc2FnZSA9PT0gJ0ZpbmFsIGFuYWx5c2lzIHRpbWVvdXQnKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTGFuZ0NoYWluIG1vZGVsIHRpbWVvdXQg4oCTIGdlbmVyYXRpbmcgZmFzdCBsb2NhbCBmYWxsYmFjaycpO1xyXG4gICAgICAgIGNvbnN0IGZhbGxiYWNrVGFibGUgPSBidWlsZExvY2FsVGFibGVGcm9tRGVGaShkYXRhLmRlZmlQcm9qZWN0cyB8fCBbXSk7XHJcbiAgICAgICAgY29uc3QgdG9wTmFtZXMgPSBmYWxsYmFja1RhYmxlLnNsaWNlKDAsNSkubWFwKHI9PnIucHJvamVjdCkuam9pbignLCAnKTtcclxuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gYFRvcCBEZUZpIHByb3RvY29scyBieSBUVkw6ICR7dG9wTmFtZXN9LiAoTG9jYWwgZmFsbGJhY2sgc3VtbWFyeSBkdWUgdG8gbW9kZWwgdGltZW91dClgO1xyXG4gICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgIHN1bW1hcnksXHJcbiAgICAgICAgICBkYXRhVGFibGU6IGZhbGxiYWNrVGFibGUsXHJcbiAgICAgICAgICBzb3VyY2VzOiBbJ0RlRmlMbGFtYSddLFxyXG4gICAgICAgICAgaW5zaWdodHM6IGZhbGxiYWNrVGFibGUuc2xpY2UoMCwzKS5tYXAocj0+YCR7ci5wcm9qZWN0fSBzaG93cyAke3IudHZsQ2hhbmdlfSBUVkwgY2hhbmdlLmApLFxyXG4gICAgICAgICAgcmlza0ZhY3RvcnM6IFsnTW9kZWwgdGltZW91dCDigJMgQUkgbmFycmF0aXZlIGxpbWl0ZWQnLCdEYXRhIG1heSBleGNsdWRlIHNtYWxsZXIgcHJvdG9jb2xzJ10sXHJcbiAgICAgICAgICBtYXJrZXRUcmVuZHM6ICdEZUZpIHNlY3RvciBzbmFwc2hvdCBnZW5lcmF0ZWQgbG9jYWxseScsXHJcbiAgICAgICAgICBjaXRhdGlvbnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGlkOiAnY2l0MScsXHJcbiAgICAgICAgICAgICAgdGV4dDogYFRvcCBEZUZpIHByb3RvY29scyBieSBUVkw6ICR7dG9wTmFtZXN9YCxcclxuICAgICAgICAgICAgICBzb3VyY2U6ICdEZUZpTGxhbWEnLFxyXG4gICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vZGVmaWxsYW1hLmNvbS8nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BhcnNpbmcgZXJyb3IsIGF0dGVtcHRpbmcgc3RydWN0dXJlZCBmYWxsYmFjayBleHRyYWN0aW9uJyk7XHJcbiAgICAgICAgY29uc3QgcmF3ID0gcGFyc2VFcnJvcj8ubGxtT3V0cHV0IHx8IHBhcnNlRXJyb3I/Lm91dHB1dCB8fCAnJztcclxuICAgICAgICBsZXQgZXh0cmFjdGVkID0gZXh0cmFjdExhc3RKc29uT2JqZWN0KHJhdyk7XHJcbiAgICAgICAgaWYgKCFleHRyYWN0ZWQpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5ID0gYXdhaXQgbW9kZWwuaW52b2tlKFtcclxuICAgICAgICAgICAgICBbJ3N5c3RlbScsICdPdXRwdXQgT05MWSBhIHNpbmdsZSB2YWxpZCBtaW5pZmllZCBKU09OIG9iamVjdCBtZWV0aW5nIHRoZSBzcGVjaWZpZWQga2V5cy4gTm8gbWFya2Rvd24uJ10sXHJcbiAgICAgICAgICAgICAgWydodW1hbicsIGBRdWVyeTogJHtxdWVyeX1cXG5EYXRhOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfVxcbktleXM6IHN1bW1hcnksZGF0YVRhYmxlLHNvdXJjZXMsaW5zaWdodHMscmlza0ZhY3RvcnMsbWFya2V0VHJlbmRzYF1cclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIGV4dHJhY3RlZCA9IGV4dHJhY3RMYXN0SnNvbk9iamVjdChyZXRyeS5jb250ZW50IGFzIHN0cmluZyk7XHJcbiAgICAgICAgICB9IGNhdGNoIChyZXRyeUVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdSZXRyeSBpbnZva2UgZmFpbGVkOicsIHJldHJ5RXJyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFleHRyYWN0ZWQpIHRocm93IHBhcnNlRXJyb3I7XHJcbiAgICAgICAgcmVzdWx0ID0gZXh0cmFjdGVkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RlcCA0OiBGb3JtYXQgdGhlIHJlc3BvbnNlXHJcbiAgICBjb25zdCByZXNwb25zZTogUmVzZWFyY2hSZXN1bHQgPSB7XHJcbiAgICAgIHN1bW1hcnk6IHJlc3VsdC5zdW1tYXJ5LFxyXG4gICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICBkYXRhVGFibGU6IHJlc3VsdC5kYXRhVGFibGUgfHwgW10sXHJcbiAgICAgIHNvdXJjZXM6IHJlc3VsdC5zb3VyY2VzLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgc2hvd0RlRmk6IGFwaVJlcXVpcmVtZW50cy5uZWVkc0RlRmlEYXRhLFxyXG4gICAgICBzaG93VGFibGU6ICEhcmVzdWx0LmRhdGFUYWJsZSxcclxuICAgICAgc2hvd0V0aGVyc2NhbjogYXBpUmVxdWlyZW1lbnRzLm5lZWRzRXRoZXJzY2FuRGF0YSxcclxuICAgICAgaXNDcnlwdG9RdWVyeTogdHJ1ZSxcclxuICAgICAgaW5zaWdodHM6IHJlc3VsdC5pbnNpZ2h0cyxcclxuICAgICAgcmlza0ZhY3RvcnM6IHJlc3VsdC5yaXNrRmFjdG9ycyxcclxuICAgICAgbWFya2V0VHJlbmRzOiByZXN1bHQubWFya2V0VHJlbmRzLFxyXG4gICAgICBjaXRhdGlvbnM6IHJlc3VsdC5jaXRhdGlvbnMgfHwgW10sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCfinIUgTGFuZ0NoYWluIGFuYWx5c2lzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgIHJldHVybiByZXNwb25zZTtcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0xhbmdDaGFpbiBhbmFseXNpcyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIGl0J3MgYSByYXRlIGxpbWl0IGVycm9yXHJcbiAgICBpZiAoZXJyb3IgJiYgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiAnc3RhdHVzJyBpbiBlcnJvciAmJiBlcnJvci5zdGF0dXMgPT09IDQyOSkge1xyXG4gICAgICBjb25zb2xlLmxvZygn8J+UhCBSYXRlIGxpbWl0IGV4Y2VlZGVkLCBmYWxsaW5nIGJhY2sgdG8gc3RhbmRhcmQgYW5hbHlzaXMuLi4nKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBJbXBvcnQgdGhlIG9yaWdpbmFsIGFuYWx5c2lzIGZ1bmN0aW9uXHJcbiAgICAgICAgY29uc3QgeyBhbmFseXplQ3J5cHRvRGF0YSB9ID0gYXdhaXQgaW1wb3J0KCcuL2dyb3EnKTtcclxuICAgICAgICBjb25zdCB7IGZldGNoQWxsRGF0YSB9ID0gYXdhaXQgaW1wb3J0KCcuL2FwaScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaEFsbERhdGEocXVlcnkpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFuYWx5emVDcnlwdG9EYXRhKHF1ZXJ5LCBkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4ucmVzdWx0LFxyXG4gICAgICAgICAgaW5zaWdodHM6IFsnQW5hbHlzaXMgY29tcGxldGVkIHVzaW5nIHN0YW5kYXJkIG1ldGhvZCBkdWUgdG8gR3JvcSByYXRlIGxpbWl0J10sXHJcbiAgICAgICAgICByaXNrRmFjdG9yczogWydDb25zaWRlciB1cGdyYWRpbmcgeW91ciBHcm9xIHBsYW4gZm9yIGhpZ2hlciByYXRlIGxpbWl0cyddLFxyXG4gICAgICAgICAgbWFya2V0VHJlbmRzOiAnRGF0YSBhbmFseXNpcyBjb21wbGV0ZWQgd2l0aCBzdGFuZGFyZCBtZXRob2QnLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0gY2F0Y2ggKGZhbGxiYWNrRXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWxsYmFjayBhbmFseXNpcyBhbHNvIGZhaWxlZDonLCBmYWxsYmFja0Vycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBGYWxsYmFjayB0byBiYXNpYyBhbmFseXNpc1xyXG4gICAgY29uc29sZS5sb2coJ/CflIQgRmFsbGluZyBiYWNrIHRvIGJhc2ljIGFuYWx5c2lzLi4uJyk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEltcG9ydCB0aGUgb3JpZ2luYWwgYW5hbHlzaXMgZnVuY3Rpb25cclxuICAgICAgY29uc3QgeyBhbmFseXplQ3J5cHRvRGF0YSB9ID0gYXdhaXQgaW1wb3J0KCcuL2dyb3EnKTtcclxuICAgICAgY29uc3QgeyBmZXRjaEFsbERhdGEgfSA9IGF3YWl0IGltcG9ydCgnLi9hcGknKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaEFsbERhdGEocXVlcnkpO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXplQ3J5cHRvRGF0YShxdWVyeSwgZGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnJlc3VsdCxcclxuICAgICAgICBpbnNpZ2h0czogWydBbmFseXNpcyBjb21wbGV0ZWQgdXNpbmcgZmFsbGJhY2sgbWV0aG9kIGR1ZSB0byBMYW5nQ2hhaW4gdGltZW91dCddLFxyXG4gICAgICAgIHJpc2tGYWN0b3JzOiBbJ0NvbnNpZGVyIHVzaW5nIHN0YW5kYXJkIG1vZGUgZm9yIGZhc3RlciByZXNwb25zZXMnXSxcclxuICAgICAgICBtYXJrZXRUcmVuZHM6ICdEYXRhIGFuYWx5c2lzIGNvbXBsZXRlZCB3aXRoIGJhc2ljIG1ldGhvZCcsXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChmYWxsYmFja0Vycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhbGxiYWNrIGFuYWx5c2lzIGFsc28gZmFpbGVkOicsIGZhbGxiYWNrRXJyb3IpO1xyXG4gICAgICBcclxuICAgICAgLy8gRmluYWwgZmFsbGJhY2sgcmVzcG9uc2VcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdW1tYXJ5OiBgQW5hbHlzaXMgY29tcGxldGVkLiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQnfS4gUGxlYXNlIHRyeSB1c2luZyB0aGUgc3RhbmRhcmQgbW9kZS5gLFxyXG4gICAgICAgIGRhdGE6IHt9LFxyXG4gICAgICAgIHNvdXJjZXM6IFsnRmFsbGJhY2sgQW5hbHlzaXMnXSxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICBzaG93RGVGaTogZmFsc2UsXHJcbiAgICAgICAgc2hvd1RhYmxlOiBmYWxzZSxcclxuICAgICAgICBzaG93RXRoZXJzY2FuOiBmYWxzZSxcclxuICAgICAgICBpc0NyeXB0b1F1ZXJ5OiB0cnVlLFxyXG4gICAgICAgIGluc2lnaHRzOiBbJ0xhbmdDaGFpbiBpbnRlZ3JhdGlvbiBlbmNvdW50ZXJlZCBhbiBlcnJvciddLFxyXG4gICAgICAgIHJpc2tGYWN0b3JzOiBbJ1VzZSBzdGFuZGFyZCBtb2RlIGZvciBtb3JlIHJlbGlhYmxlIHJlc3BvbnNlcyddLFxyXG4gICAgICAgIG1hcmtldFRyZW5kczogJ1VuYWJsZSB0byBjb21wbGV0ZSBhbmFseXNpcyB3aXRoIGN1cnJlbnQgc2V0dXAnLFxyXG4gICAgICAgIGNpdGF0aW9uczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJ2NpdDEnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnQW5hbHlzaXMgZW5jb3VudGVyZWQgYW4gZXJyb3IgZHVyaW5nIHByb2Nlc3NpbmcuJyxcclxuICAgICAgICAgICAgc291cmNlOiAnU3lzdGVtJyxcclxuICAgICAgICAgICAgdXJsOiB1bmRlZmluZWRcclxuICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBCdWlsZCBhIGxpZ2h0d2VpZ2h0IHRhYmxlIGZyb20gRGVGaSBwcm9qZWN0cyB3aXRob3V0IG1vZGVsIGFzc2lzdGFuY2VcclxuZnVuY3Rpb24gYnVpbGRMb2NhbFRhYmxlRnJvbURlRmkoZGVmaVByb2plY3RzOiBhbnlbXSk6IERhdGFUYWJsZVJvd1tdIHtcclxuICByZXR1cm4gWy4uLmRlZmlQcm9qZWN0c11cclxuICAgIC5zb3J0KChhLGIpPT4gKGIudHZsfHwwKS0oYS50dmx8fDApKVxyXG4gICAgLnNsaWNlKDAsMTApXHJcbiAgICAubWFwKHAgPT4gKHtcclxuICAgICAgcHJvamVjdDogcC5uYW1lLFxyXG4gICAgICB0dmw6IHAudHZsID8gYCQkeyhwLnR2bC8xZTkpLnRvRml4ZWQoMil9QmAgOiAnTi9BJyxcclxuICAgICAgdHZsQ2hhbmdlOiB0eXBlb2YgcC50dmxDaGFuZ2UyNGggPT09ICdudW1iZXInID8gYCR7cC50dmxDaGFuZ2UyNGg+PTA/JysnOicnfSR7cC50dmxDaGFuZ2UyNGgudG9GaXhlZCgyKX0lYCA6ICcwJScsXHJcbiAgICAgIHByaWNlOiAnTi9BJyxcclxuICAgICAgcHJpY2VDaGFuZ2U6ICdOL0EnLFxyXG4gICAgICBzZW50aW1lbnQ6IHAudHZsQ2hhbmdlMjRoID4gMiA/ICdQb3NpdGl2ZScgOiBwLnR2bENoYW5nZTI0aCA8IC0yID8gJ05lZ2F0aXZlJyA6ICdOZXV0cmFsJyxcclxuICAgICAgbmV3c0NvdW50OiAwXHJcbiAgICB9KSk7XHJcbn1cclxuXHJcbi8vIE1lbW9yeSBhbmQgY29udmVyc2F0aW9uIG1hbmFnZW1lbnRcclxuZXhwb3J0IGNsYXNzIENvbnZlcnNhdGlvbk1lbW9yeSB7XHJcbiAgcHJpdmF0ZSBtZXNzYWdlczogQXJyYXk8eyByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JzsgY29udGVudDogc3RyaW5nOyB0aW1lc3RhbXA6IERhdGUgfT4gPSBbXTtcclxuICBwcml2YXRlIG1heE1lc3NhZ2VzID0gMTA7XHJcblxyXG4gIGFkZE1lc3NhZ2Uocm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcsIGNvbnRlbnQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKHsgcm9sZSwgY29udGVudCwgdGltZXN0YW1wOiBuZXcgRGF0ZSgpIH0pO1xyXG4gICAgXHJcbiAgICAvLyBLZWVwIG9ubHkgdGhlIGxhc3QgTiBtZXNzYWdlc1xyXG4gICAgaWYgKHRoaXMubWVzc2FnZXMubGVuZ3RoID4gdGhpcy5tYXhNZXNzYWdlcykge1xyXG4gICAgICB0aGlzLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcy5zbGljZSgtdGhpcy5tYXhNZXNzYWdlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRDb252ZXJzYXRpb25IaXN0b3J5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1xyXG4gICAgICAubWFwKG1zZyA9PiBgJHttc2cucm9sZX06ICR7bXNnLmNvbnRlbnR9YClcclxuICAgICAgLmpvaW4oJ1xcbicpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLm1lc3NhZ2VzID0gW107XHJcbiAgfVxyXG59XHJcblxyXG4vLyBUb29sIGZvciBkYXRhIGFuYWx5c2lzXHJcbmV4cG9ydCBjb25zdCBkYXRhQW5hbHlzaXNUb29sID0ge1xyXG4gIG5hbWU6ICdhbmFseXplX2NyeXB0b19kYXRhJyxcclxuICBkZXNjcmlwdGlvbjogJ0FuYWx5emUgY3J5cHRvY3VycmVuY3kgYW5kIERlRmkgZGF0YSB1c2luZyBMYW5nQ2hhaW4nLFxyXG4gIHNjaGVtYTogei5vYmplY3Qoe1xyXG4gICAgcXVlcnk6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ1RoZSBhbmFseXNpcyBxdWVyeScpLFxyXG4gICAgbW9kZTogei5lbnVtKFsncmVzZWFyY2gnLCAnY2hhdCddKS5kZXNjcmliZSgnQW5hbHlzaXMgbW9kZScpXHJcbiAgfSksXHJcbiAgZnVuYzogYXN5bmMgKGlucHV0OiB7IHF1ZXJ5OiBzdHJpbmc7IG1vZGU6ICdyZXNlYXJjaCcgfCAnY2hhdCcgfSkgPT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGFuYWx5emVXaXRoTGFuZ0NoYWluKGlucHV0LnF1ZXJ5LCBpbnB1dC5tb2RlKTtcclxuICB9XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJDaGF0R3JvcSIsIlByb21wdFRlbXBsYXRlIiwiUnVubmFibGVTZXF1ZW5jZSIsIlN0cnVjdHVyZWRPdXRwdXRQYXJzZXIiLCJ6IiwiZmV0Y2hDcnlwdG9EYXRhIiwiZmV0Y2hEZUZpUHJvamVjdHMiLCJmZXRjaER1bmVEYXRhIiwiZmV0Y2hFdGhlcnNjYW5HYXNQcmljZSIsImZldGNoRXRoZXJzY2FuVG9rZW5JbmZvIiwiZmV0Y2hFdGhlcnNjYW5UcmFuc2FjdGlvbnMiLCJtb2RlbCIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJHUk9RX0FQSV9LRVkiLCJ0ZW1wZXJhdHVyZSIsIm1heFRva2VucyIsInRpbWVvdXQiLCJBUElSZXF1aXJlbWVudHNTY2hlbWEiLCJvYmplY3QiLCJuZWVkc0NyeXB0b0RhdGEiLCJib29sZWFuIiwiZGVzY3JpYmUiLCJjcnlwdG9TeW1ib2xzIiwiYXJyYXkiLCJzdHJpbmciLCJuZWVkc0RlRmlEYXRhIiwibmVlZHNFdGhlcnNjYW5EYXRhIiwiZXRoZXJzY2FuQWN0aW9ucyIsIm5lZWRzRHVuZURhdGEiLCJkdW5lUXVlcnkiLCJvcHRpb25hbCIsImFuYWx5c2lzVHlwZSIsImVudW0iLCJwcmlvcml0eSIsIlJlc2VhcmNoUmVzdWx0U2NoZW1hIiwic3VtbWFyeSIsImRhdGFUYWJsZSIsInByb2plY3QiLCJ0dmwiLCJ0dmxDaGFuZ2UiLCJwcmljZSIsInByaWNlQ2hhbmdlIiwic2VudGltZW50IiwibmV3c0NvdW50IiwidW5pb24iLCJudW1iZXIiLCJzb3VyY2VzIiwiaW5zaWdodHMiLCJyaXNrRmFjdG9ycyIsIm1hcmtldFRyZW5kcyIsImNpdGF0aW9ucyIsImlkIiwidGV4dCIsInNvdXJjZSIsInVybCIsImFwaVJlcXVpcmVtZW50c1BhcnNlciIsImZyb21ab2RTY2hlbWEiLCJyZXNlYXJjaFJlc3VsdFBhcnNlciIsImdldFJlc2VhcmNoRm9ybWF0SW5zdHJ1Y3Rpb25zIiwiZXh0cmFjdExhc3RKc29uT2JqZWN0IiwiY2xlYW5lZCIsInJlcGxhY2UiLCJtYXRjaGVzIiwiZGVwdGgiLCJzdGFydCIsImkiLCJsZW5ndGgiLCJjaCIsInB1c2giLCJzbGljZSIsIkpTT04iLCJwYXJzZSIsImFwaUFuYWx5c2lzUHJvbXB0IiwiZnJvbVRlbXBsYXRlIiwicmVzZWFyY2hQcm9tcHQiLCJhcGlBbmFseXNpc0NoYWluIiwiZnJvbSIsInF1ZXJ5IiwiaW5wdXQiLCJmb3JtYXRfaW5zdHJ1Y3Rpb25zIiwiZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zIiwicmVzZWFyY2hDaGFpbiIsImNyeXB0b0RhdGEiLCJzdHJpbmdpZnkiLCJkYXRhIiwiZGVmaVByb2plY3RzIiwiZXRoZXJzY2FuRGF0YSIsImR1bmVEYXRhIiwiZmV0Y2hSZXF1aXJlZERhdGEiLCJyZXF1aXJlbWVudHMiLCJjb25zb2xlIiwibG9nIiwiY3J5cHRvUHJvbWlzZSIsIlByb21pc2UiLCJyYWNlIiwiXyIsInJlamVjdCIsInNldFRpbWVvdXQiLCJFcnJvciIsImRlZmlQcm9taXNlIiwiYWN0aW9uIiwiZ2FzUHJpY2UiLCJ0b2tlbkluZm8iLCJ0cmFuc2FjdGlvbnMiLCJlcnJvciIsImFuYWx5emVXaXRoTGFuZ0NoYWluIiwibW9kZSIsImFwaVJlcXVpcmVtZW50cyIsImludm9rZSIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiYSIsImIiLCJtYXJrZXRDYXAiLCJyZXN1bHQiLCJNT0RFTF9USU1FT1VUX01TIiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiLCJ3YXJuIiwiZmFsbGJhY2tUYWJsZSIsImJ1aWxkTG9jYWxUYWJsZUZyb21EZUZpIiwidG9wTmFtZXMiLCJtYXAiLCJyIiwiam9pbiIsInJhdyIsImxsbU91dHB1dCIsIm91dHB1dCIsImV4dHJhY3RlZCIsInJldHJ5IiwiY29udGVudCIsInJldHJ5RXJyIiwicmVzcG9uc2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzaG93RGVGaSIsInNob3dUYWJsZSIsInNob3dFdGhlcnNjYW4iLCJpc0NyeXB0b1F1ZXJ5Iiwic3RhdHVzIiwiYW5hbHl6ZUNyeXB0b0RhdGEiLCJmZXRjaEFsbERhdGEiLCJmYWxsYmFja0Vycm9yIiwidW5kZWZpbmVkIiwicCIsIm5hbWUiLCJ0b0ZpeGVkIiwidHZsQ2hhbmdlMjRoIiwiQ29udmVyc2F0aW9uTWVtb3J5IiwiYWRkTWVzc2FnZSIsInJvbGUiLCJtZXNzYWdlcyIsIm1heE1lc3NhZ2VzIiwiZ2V0Q29udmVyc2F0aW9uSGlzdG9yeSIsIm1zZyIsImNsZWFyIiwiZGF0YUFuYWx5c2lzVG9vbCIsImRlc2NyaXB0aW9uIiwic2NoZW1hIiwiZnVuYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/langchain.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/tr46","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/@langchain","vendor-chunks/axios","vendor-chunks/semver","vendor-chunks/zod-to-json-schema","vendor-chunks/langsmith","vendor-chunks/zod","vendor-chunks/uuid","vendor-chunks/asynckit","vendor-chunks/@cfworker","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/retry","vendor-chunks/p-queue","vendor-chunks/get-proto","vendor-chunks/js-tiktoken","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/mustache","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/p-timeout","vendor-chunks/p-retry","vendor-chunks/p-finally","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/eventemitter3","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/decamelize","vendor-chunks/combined-stream","vendor-chunks/camelcase","vendor-chunks/base64-js"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-langchain%2Froute&page=%2Fapi%2Fanalyze-langchain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-langchain%2Froute.ts&appDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CWindows%5CDesktop%5CRover%5Cprojects%5Cweb3%20ai%20agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();